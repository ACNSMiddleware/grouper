/*
 * Copyright (C) 2004-2005 University Corporation for Advanced Internet Development, Inc.
 * Copyright (C) 2004-2005 The University Of Chicago
 * All Rights Reserved. 
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  * Neither the name of the University of Chicago nor the names
 *    of its contributors nor the University Corporation for Advanced
 *   Internet Development, Inc. may be used to endorse or promote
 *   products derived from this software without explicit prior
 *   written permission.
 *
 * You are under no obligation whatsoever to provide any enhancements
 * to the University of Chicago, its contributors, or the University
 * Corporation for Advanced Internet Development, Inc.  If you choose
 * to provide your enhancements, or if you choose to otherwise publish
 * or distribute your enhancements, in source code form without
 * contemporaneously requiring end users to enter into a separate
 * written license agreement for such enhancements, then you thereby
 * grant the University of Chicago, its contributors, and the University
 * Corporation for Advanced Internet Development, Inc. a non-exclusive,
 * royalty-free, perpetual license to install, use, modify, prepare
 * derivative works, incorporate into the software or other computer
 * software, distribute, and sublicense your enhancements or derivative
 * works thereof, in binary and source code form.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND WITH ALL FAULTS.  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT ARE DISCLAIMED AND the
 * entire risk of satisfactory quality, performance, accuracy, and effort
 * is with LICENSEE. IN NO EVENT SHALL THE COPYRIGHT OWNER, CONTRIBUTORS,
 * OR THE UNIVERSITY CORPORATION FOR ADVANCED INTERNET DEVELOPMENT, INC.
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This class was generated by [Kodekopelli](http://www.kodekopelli.org/)
 */

package test.edu.internet2.middleware.grouper;

import  edu.internet2.middleware.grouper.*;
import  edu.internet2.middleware.subject.*;
import  edu.internet2.middleware.subject.provider.*;
import  java.io.*;
import  java.util.*;
import  junit.framework.*;

public class TestMonolithic extends TestCase {

  public TestMonolithic(String name) {
    super(name);
  }

  protected void setUp () {
    DB db = new DB();
    db.emptyTables();
    db.stop();
  }

  protected void tearDown () {
    // Nothing -- Yet
  }

  /*
   * TESTS
   */

  public void testMonolithic() { 

    Set   children  = new HashSet();
    List  found     = new ArrayList();
 
    // create root stem: a
    Stem a = new Stem();
    a.setExtension("a");
    Assert.assertNotNull("0.0", a);
    Assert.assertTrue("0.1", a.getExtension().equals("a"));
    Assert.assertNull("0.2", a.getParentStem());
    Assert.assertNull("0.3", a.getChildStems());
    Assert.assertNull("0.4", a.getChildGroups());
    Assert.assertNull("0.5", a.getCreateTime());
    Assert.assertNull("0.6", a.getCreator());
    Assert.assertNull("0.7", a.getDescription());
    Assert.assertNull("0.8", a.getDisplayExtension());
    Assert.assertNull("0.9", a.getDisplayName());
    Assert.assertNull("0.10", a.getModifier());
    Assert.assertNull("0.11", a.getModifyTime());
    Assert.assertNull("0.12", a.getName());
    Assert.assertNull("0.13", a.getUuid());

    // create stem: a:b
    Stem ab = new Stem();
    ab.setExtension("b");
    Assert.assertNotNull("1.0", ab);
    Assert.assertTrue("1.1", ab.getExtension().equals("b"));
    Assert.assertNull("1.2", ab.getParentStem());
    Assert.assertNull("1.3", ab.getChildStems());
    Assert.assertNull("1.4", ab.getChildGroups());
    Assert.assertNull("1.5", ab.getCreateTime());
    Assert.assertNull("1.6", ab.getCreator());
    Assert.assertNull("1.7", ab.getDescription());
    Assert.assertNull("1.8", ab.getDisplayExtension());
    Assert.assertNull("1.9", ab.getDisplayName());
    Assert.assertNull("1.10", ab.getModifier());
    Assert.assertNull("1.11", ab.getModifyTime());
    Assert.assertNull("1.12", ab.getName());
    Assert.assertNull("1.13", ab.getUuid());

    // add child stem: a, a:b
    ab.setParentStem(a);
    Assert.assertTrue("2.0", ab.getParentStem().equals(a));
    Assert.assertNull("2.1", a.getChildStems());
    children = new HashSet();
    children.add( ab );
    a.setChildStems( children );
    Assert.assertTrue("2.2", a.getChildStems().size() == 1);
    Assert.assertTrue("2.3", a.getChildStems().contains(a));

    // create stem: a:b:c
    Stem abc = new Stem();
    abc.setExtension("c");
    Assert.assertNotNull("3.0", abc);
    Assert.assertTrue("3.1", abc.getExtension().equals("c"));
    Assert.assertNull("3.2", abc.getParentStem());
    Assert.assertNull("3.3", abc.getChildStems());
    Assert.assertNull("3.4", abc.getChildGroups());
    Assert.assertNull("3.5", abc.getCreateTime());
    Assert.assertNull("3.6", abc.getCreator());
    Assert.assertNull("3.7", abc.getDescription());
    Assert.assertNull("3.8", abc.getDisplayExtension());
    Assert.assertNull("3.9", abc.getDisplayName());
    Assert.assertNull("3.10", abc.getModifier());
    Assert.assertNull("3.11", abc.getModifyTime());
    Assert.assertNull("3.12", abc.getName());
    Assert.assertNull("3.13", abc.getUuid());

    // add child stem: a:b, a:b:c
    abc.setParentStem(ab);
    Assert.assertTrue("4.0", abc.getParentStem().equals(ab));
    Assert.assertTrue("4.0.0", abc.getParentStem().getParentStem().equals(a));
    Assert.assertNull("4.1", ab.getChildStems());
    children = new HashSet();
    children.add( abc );
    ab.setChildStems( children );
    Assert.assertTrue("4.2", ab.getChildStems().size() == 1);
    Assert.assertTrue("4.3", ab.getChildStems().contains(abc));

  }

}

