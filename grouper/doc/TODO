
# Grouper Development TODO List

This file provides more detailed information on future Grouper
development as listed in _doc/ROADMAP_..

$Id: TODO,v 1.30.2.8 2006-04-13 00:35:33 blair Exp $

---

## Grouper 1.0

### Next Actions
* code: add `SubjectFinder.findById(id, type, source)`
* code: add `SubjectFinder.findByIdentifier(id, type, source)`
* code: add `SubjectFinder.findAll(query, source)`
* code: replace `GroupType.addField()` with `GroupType.addAttribute()` and `GroupType.addList()`
* code: empty stem deletion
* code: `StemAttributeFilter`
* code: record db schema version in db
* code: add daemon (singleton?)
* code: start+stop daemon via api
* code: embed hsqldb within daemon 
** admin: update to latest hsqldb
** code: do not stop hsqldb if using non-embedded db
* test: basic concurrency testing
* MAYBE code: add registry integrity thread to daemon
* code: add union composite member (sync)
* code: delete union composite member (sync)
* code: add complement composite member (sync)
* code: delete complement composite member (sync)
* code: add intersection composite member (sync)
* code: delete intersection composite member (sync)
* code: privilege cleanup - `NamingResolver`
* code: privilege cleanup - `AccessResolver`
* code: privilege cleanup - Hibernate-backed `PrivilegeCache`
* code: non-hibernated sessions
* code: remove (all|most) RTEs
* code: toString cleanup
* code: attribute retrieval cleanup
* code: add getting-and-setting sync mode to sessions
* code: add member (async)
* code: delete member (async)
* code: grant access privilege (async)
* code: revoke access privilege (async)
* code: grant naming privilege (async)
* code: revoke naming privilege (async)
* code: add union composite member (async)
* code: delete union composite member (async)
* code: add complement composite member (async)
* code: delete complement composite member (async)
* code: add intersection composite member (async)
* code: delete intersection composite member (async)
* test: concurrency, deletion and async mods
* test: concurrency testing (i expect to find many bugs)
* code: class to verify that setup is functional
** find the root stem, exercise subject api, hibernate dialect + driver class, etc
* code: add `Group.canReadField(f)`
* code: add `Group.canReadField(f, subj)`
* code: add `Group.canWriteField(f)`
* code: add `Group.canWriteField(f, subj)`
* code: add `Group.getTypes()` that will return all types that the
  group has, including base but excluding internal types
* code: add `Group.getRemovableTypes()` that will return all types
  that can be removed from the group
* code: update to latest subject api

### Maybe
* code: `ErrorLog`
* code: `DebugLog`
* code: make thread sleep times (invisibly?) configurable
* code: `Owner`-related cleanup
* code: delete custom group types
* packaging: create binary-and-source distributions
* code: unhibernate `GrouperSession`
* code: enable batch fetching of `Membership` objects
* code: order `Membership` queries by depth
* code: Don't assign `GrouperSystem` privileges
* document: add `@since` to javadoc
* library: update [jug](http://jug.safehaus.org/)

---

## Grouper 1.0.1
* code: Grouper 1.0 bugfixes
* code: import of operational attributes from xml

---

## Grouper 1.1
* code: add group aging
* code: add membership aging

---

## Future Releases 

### API
* code: expose `HibernateSubject`
* code: ws version of `GrouperSourceAdapter`
* code: refactor `PrivilegeCache`
* code: make cache usage more configurable
* code: improved internal API model validation
* code: `StemCreatedByFilter`
* code: `StemModifiedByFilter`
* code: `GroupCreatedByFilter`
* code: `GroupModifiedByFilter`
* code: `IsMemberFilter`
* code: `IsImmediateMemberFilter`
* code: `IsEffectiveMemberFilter`
* code: ws-ify API
* code: member aging
* code: `Stem.addChildStem()` that takes an optional argument to
  override configuration defaults
* code: `Stem.addChildGroup()` that takes an optional argument to
  override configuration defaults
* code: session proxying/"act as" support
* code: search limits
* code: paged search results
* code: group hierarchy depth restrictions

## Contributed Code
* code: flatfile source adapter 
* code `LaxAccessAdapter`
* code `LaxNamingAdapter`
* code: dns source adapter 

---

$Id: TODO,v 1.30.2.8 2006-04-13 00:35:33 blair Exp $

