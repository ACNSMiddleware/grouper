
<project name="tierInstrumentationCollector" default="build" basedir=".">

  <!-- ant contrib allows conditionals in ant scripts -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${basedir}/lib/ant/ant-contrib.jar" />
    </classpath>
  </taskdef>

  <if><not><available file="build.properties" /></not>
    <then><copy file="build.properties.template" 
      tofile="build.properties" /></then>
  </if> 

  <property file="build.properties"/>

  <target name="build" description="full build" depends="init,clean,compile,jarPrepare,jar">
  </target>

  <target name="init">
    <tstamp />

    <property file="${basedir}/misc/version.properties"/>

    <property name="cvs.branch" value="HEAD" />
    
    <property name="main.sourceDir" value="src/main" />

    <property name="main.confDir" value="src/resources" />

    <property name="main.lib" value="lib" />

    <property name="main.binDir" value="dist/bin" />

    <property name="main.outputDir" value="dist" />

    <property name="main.appName" value="tierInstrumentationCollector" />
    <property name="main.jarFile" value="${main.outputDir}/${main.appName}.jar" />

    <path id="main.classpath">
      <fileset dir="${main.lib}">
        <include name="**/*.jar" />
      </fileset>
      <fileset dir="${grouper.client.folder}/dist">
        <include name="grouperClient.jar"/>
      </fileset>
    </path>

    <condition property="main.os" value="windows">
      <os family="windows" />
    </condition>
    <condition property="main.os" value="unix">
      <os family="unix" />
    </condition>

    <pathconvert targetos="${main.os}" property="main.theClasspath" refid="main.classpath" />
    
  </target>

  <target name="clean">
    <mkdir dir="${main.binDir}" />
    <delete dir="${main.binDir}" />
    <mkdir dir="${main.binDir}" />

  </target> 
  
  <target name="compile">
    <mkdir dir="${main.outputDir}" />
    <mkdir dir="${main.binDir}" />

    <javac  target="1.6"
      srcdir="${main.sourceDir}" destdir="${main.binDir}" debug="true" classpath="${main.theClasspath}" />
  </target>

  <target name="jarPrepare">
    <mkdir dir="${main.binDir}" />

    <copy todir="${main.binDir}">
      <fileset dir="${main.sourceDir}">
        <include name="**/*.java"/>      <!-- source -->
        <include name="**/*.txt"/>      <!-- txt -->
        <include name="**/*.html"/>      <!-- html -->
      </fileset>
      <fileset dir="${main.confDir}">
        <include name="*.base.properties"/>      <!-- sample config -->
      </fileset>
      <fileset dir="misc">
        <include name="standardApi.server.properties"/>      <!-- sample config -->
      </fileset>
      <fileset dir="${basedir}">
        <include name="README.txt"/>      <!-- sample config -->
      </fileset>
    </copy>
  </target>

  <target name="jar">
    <tstamp>
        <format property="the.timestamp" pattern="yyyy/MM/dd HH:mm:ss" />
    </tstamp>
    <jar jarfile="${main.jarFile}" duplicate="fail">
      <fileset dir="misc">
        <include name="META-INF/*" />
      </fileset>
      <fileset dir="${main.binDir}" />
      <manifest>
        <attribute name="Built-By"                value="${user.name}"/>
        <attribute name="Implementation-Title"    value="${main.appName}"/>
        <attribute name="Implementation-Version"  value="${version}"/>
        <attribute name="Implementation-URL"      value="https://spaces.internet2.edu/display/cifer/Authorization+Standard+API"/>
        <attribute name="Build-Timestamp"         value="${the.timestamp}"/>
      </manifest>
     </jar>
    <property name="instName" value="${main.appName}.institution-${version}" />
    <mkdir dir="dist/institution/${instName}"/>
    <copy todir="dist/institution/${instName}">    
      <fileset dir="${main.confDir}">
        <include name="standardApi.server.properties"/>
      </fileset>
      <fileset dir="dist">
        <include name="${main.appName}.jar"/>
      </fileset>
    </copy>
    <tar destfile="dist/${instName}.tar.gz" compression="gzip">
      <tarfileset dir="dist/institution" >
        <include name="${instName}/**"/>
      </tarfileset>
    </tar>            
    <echo message="Output is: dist/${main.appName}.jar and dist/${instName}.tar.gz" />
    <echo message="Note: dist/${instName}.tar.gz contains the conf/standardApi.server.base.properties, make sure it has no sensitive credentials in it" />
   </target>
  
  <target name="distPackage" description="build tar gz on internet2 box" depends="init,javadoc">

    <delete dir="doc" />

    <copy todir="${basedir}/../${main.appName}.server-${version}">
      <fileset dir="${basedir}/../${main.appName}" />
    </copy>
    
    <!-- this assumes that everything was checked out to the right place, and no other dirs exist -->
    <tar destfile="${basedir}/../${main.appName}.server-${version}.tar.gz" compression="gzip">
      <tarfileset dir="${basedir}/.." >
        <include name="${main.appName}.server-${version}/**"/>
      </tarfileset>
    </tar>            
    
  </target>

  <target name="distBinary" description="build tar gz on internet2 box" depends="init,clean,compile,jarPrepare,jar">
    <property name="binName" value="${main.appName}.binary-${version}" />
    
    <mkdir dir="dist/binary/${binName}"/>
    <mkdir dir="dist/binary/${binName}/webapp"/>
    <mkdir dir="dist/binary/${binName}/webapp/WEB-INF"/>
    <mkdir dir="dist/binary/${binName}/webapp/WEB-INF/classes"/>
    <mkdir dir="dist/binary/${binName}/webapp/WEB-INF/lib"/>

    <copy todir="dist/binary/${binName}">    
      <fileset dir="misc">
        <include name="database.sql"/>
      </fileset>
    </copy>
    <copy todir="dist/binary/${binName}/webapp/WEB-INF/classes">    
      <fileset dir="${main.confDir}">
        <include name="*.base.properties"/>
        <include name="*.example.properties"/>
      </fileset>
    </copy>
    <copy todir="dist/binary/${binName}/webapp/WEB-INF">    
      <fileset dir="webapp/WEB-INF">
        <include name="web.xml"/>
      </fileset>
      <fileset dir="misc">
        <include name="BINARY-README.txt"/>
      </fileset>
    </copy>
    <copy todir="dist/binary/${binName}/webapp/WEB-INF/lib">    
      <fileset dir="dist">
        <include name="${main.appName}.jar"/>
      </fileset>
      <fileset dir="lib/collector">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${grouper.client.folder}/dist">
        <include name="grouperClient.jar"/>
      </fileset>
    </copy>
    <tar destfile="dist/${binName}.tar.gz" compression="gzip">
      <tarfileset dir="dist/binary" >
        <include name="${binName}/**"/>
      </tarfileset>
    </tar>            
  </target>
  
  <target name="javadoc" description="generate public api docs for users to javadoc/api" depends="init">
    <!-- Let's be sure we clear out old cruft first... -->
    <mkdir dir="javadoc/api" />
    <delete dir="javadoc/api" />
    <mkdir dir="javadoc/api" />
    <!-- header="&lt;script&gt;alert('whatever');&lt;/script&gt;" -->
    <javadoc destdir="javadoc/api" access="public" classpath="${main.theClasspath}"
      additionalparam="-notimestamp" >
      <packageset dir="src/main" defaultexcludes="yes">
        <include name="edu/internet2/middleware/tierInstrumentationCollector/**" />

      </packageset>

      <link href="http://struts.apache.org/1.2.x/api/" />
      <link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api" />
      <link href="http://java.sun.com/j2se/1.4.2/docs/api" />

    </javadoc>
  </target>

  <target name="dev" description="copy libs to webapp dir so the app can be run in dev, 
    grouperClient lib should not be there.  Note this should only need 
    to be done once (unless non grouper jars change)">
    <mkdir dir="${basedir}/webapp/WEB-INF/lib" />
    <delete dir="${basedir}/webapp/WEB-INF/lib" includes="*.jar" />
    <copy todir="${basedir}/webapp/WEB-INF/lib">
      <fileset dir="${basedir}/lib/collector" includes="*.jar" />
    </copy>
    <copy todir="${basedir}/webapp/WEB-INF/lib">
      <fileset dir="${grouper.client.folder}/dist">
        <include name="grouperClient.jar"/>
      </fileset>
    </copy>
  </target>

</project>