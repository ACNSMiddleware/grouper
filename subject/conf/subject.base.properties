#
# Copyright 2014 Internet2
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Subject configuration
# $Id: subject.base.properties,v 1.24 2009-12-30 04:23:02 mchyzer Exp $
#

# The subject proprties uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from subject.base.properties
# (which should not be edited), and the subject.properties overlays
# the base settings.  See the subject.base.properties for the possible
# settings that can be applied to the subject.properties

########################################
## Config chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:subject.example.properties, file:c:/something/myconfig.properties
subject.config.hierarchy = classpath:subject.base.properties, classpath:subject.properties

# seconds between checking to see if the config files are updated
subject.config.secondsBetweenUpdateChecks = 60

########################################

# enter the location of the sources.xml.  Must start with classpath: or file:
# default is: classpath:sources.xml
# e.g. file:/dir1/dir2/sources.xml
# subject.sources.xml.location = classpath:sources.xml
subject.sources.xml.location = classpath:sources.xml

#########################################
## Configuration across all types of sources
#########################################

# generally the <configName> is the same as or similar to the source id.  This cannot have special characters
# this links together all the configs for this source
# subjectApi.source.<configName>.id = sourceId

# this is a friendly name for the source
# subjectApi.source.<configName>.name = sourceName

# type is not used all that much.  Can have multiple types, comma separate.  Can be person, group, application
# subjectApi.source.<configName>.types = person
# subjectApi.source.<configName>.types = person, application

# the adapter class implements the interface: edu.internet2.middleware.subject.Source
# adapter class must extend: edu.internet2.middleware.subject.provider.BaseSourceAdapter
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter2  :  if doing JDBC this should be used if possible.  All subject data in one table/view.
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter   :  oldest JDBC source.  Put freeform queries in here
# edu.internet2.middleware.grouper.subj.GrouperJndiSourceAdapter   :  used for LDAP
# subjectApi.source.<configName>.adapterClass = 

# You can flag a source as not throwing exception on a findAll (general search) i.e. if it is
# ok if it is down.  Generally you probably won't want to do this.  It defaults to true if omitted.
# subjectApi.source.<configName>.param.throwErrorOnFindAllFailure.value = true

#########################################
# You can make virtual attributes (attributes with formatting or based on other attributes) like this:
# init-param name is subjectVirtualAttribute_<index>_<name> where index is the order to be processed
# if some depend on others (0 to 99).  The value is the jexl expression language.  You can use subjectUtils
# methods (aliased with "subjectUtils", or you can register your own class (must have default constructor).
# Here are examples:
#
# This virtual attribute is accessible via: subject.getAttributeValue("loginIdLfNameLoginId");
# subjectApi.source.<configName>.param.subjectVirtualAttribute_0_loginIdLfName.value = Hey ${subject.getAttributeValue('LOGINID')} and ${subject.getAttributeValue('LFNAME')}
#
# ldap search attribute
# subjectApi.source.<configName>.param.subjectVirtualAttribute_0_searchAttribute0.value = ${subjectUtils.defaultIfBlank(subject.getAttributeValueOrCommaSeparated('uid'), "")},${subjectUtils.defaultIfBlank(subject.getAttributeValueOrCommaSeparated('cn'), "")},${subjectUtils.defaultIfBlank(subject.getAttributeValueOrCommaSeparated('exampleEduRegId'), "")}
#
# subjectApi.source.<configName>.param.subjectVirtualAttribute_1_loginIdLfNameLoginId.value = ${subject.getAttributeValue('loginIdLfName')} Hey ${subject.getAttributeValue('LOGINID')} and ${subject.getAttributeValue('LFNAME')}
#
# when evaluating the virtual attribute EL expression, this variable can be used from this java class.
# JDBCSourceAdapterTest variable is the edu.internet2.middleware.subject.provider.JDBCSourceAdapterTest class.  Call static methods  
# subjectApi.source.<configName>.param.subjectVirtualAttributeVariable_JDBCSourceAdapterTest.value = edu.internet2.middleware.subject.provider.JDBCSourceAdapterTest
#
# subjectApi.source.<configName>.param.subjectVirtualAttribute_2_loginIdSquared.value = ${JDBCSourceAdapterTest.appendToSelf(subject.getAttributeValue('LOGINID'))}
#
##########################################
#
# Check config is when a source is having diagnostics run (e.g. on a system health check)
# 
# if a system check should try to resolve a subject by id on this source
# subjectApi.source.<configName>.param.findSubjectByIdOnCheckConfig.value = true
#
# by default it will try to find a random string.  If you want a speicific ID to be found enter that here
# subjectApi.source.<configName>.param.subjectIdToFindOnCheckConfig.value = someSubjectIdWhichMightExistOrWhatever
#
# by default it will do a search by subject identifier
# subjectApi.source.<configName>.param.findSubjectByIdentifiedOnCheckConfig.value = true
#
# by default it will use a random value for subject identifier to lookup, you can specify a value here
# subjectApi.source.<configName>.param.subjectIdentifierToFindOnCheckConfig.value = someSubjectIdentifierWhichMightExistOrWhatever
#
# by default it will search for a subject by string
# subjectApi.source.<configName>.param.findSubjectByStringOnCheckConfig.value = true
#
# you can specify the search string here or it will be a random value
# subjectApi.source.<configName>.param.stringToFindOnCheckConfig.value = someStringWhichMightExistOrWhatever
#
###########################################
#
# Common params for all types of soures
# 
# the 0th (1st) sort attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 sort attributes 
# subjectApi.source.<configName>.param.sortAttribute0.value = description
#
# example ldap sort attribute (note: you would have two sortAttribute0's in the same source)
# subjectApi.source.<configName>.param.sortAttribute0.value = cn
#
# the 0th search attribute for lists on screen that are derived from member table (e.g. search for member in group)
# you can have up to 5 search attributes 
# subjectApi.source.<configName>.param.searchAttribute0.value = anotherName
#
# subject identifier to store in grouper's member table.  this is used to increase speed of loader and perhaps for provisioning
# you can have up to max 1 subject identifier
# subjectApi.source.<configName>.param.subjectIdentifierAttribute0.value = uid
#
# internal attributes are used by grouper only not exposed to code that uses subjects.  comma separated
# subjectApi.source.<configName>.internalAttributes = someName, anotherName
#
#########################################
#
# you can set these jdbc and pooling settings for sources:
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter2 and edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter
#
# edu.internet2.middleware.subject.provider.C3p0JdbcConnectionProvider (default)
# edu.internet2.middleware.subject.provider.DbcpJdbcConnectionProvider (legacy) 
# edu.internet2.middleware.grouper.subj.GrouperJdbcConnectionProvider this will get connections from the default Grouper database, you dont need username and pass and url etc here
# subjectApi.source.<configName>.param.jdbcConnectionProvider.value = edu.internet2.middleware.grouper.subj.GrouperJdbcConnectionProvider
# 
# the followign settings are for sources which do not use edu.internet2.middleware.grouper.subj.GrouperJdbcConnectionProvider
#
# seconds of max connection age
# subjectApi.source.<configName>.param.maxConnectionAge.value = 600
# 
# if connections from pool should be tested when checked out from pool
# subjectApi.source.<configName>.param.testConnectionOnCheckout.value = true|false
#
# query to use to test the connection when checking out from pool
# subjectApi.source.<configName>.param.preferredTestQuery.value = select 1 from dual
# 
# seconds between tests of idle connections in pool
# subjectApi.source.<configName>.param.idleConnectionTestPeriod.value = 600
#
#       e.g. mysql:           com.mysql.jdbc.Driver
#       e.g. p6spy (log sql): com.p6spy.engine.spy.P6SpyDriver
#         for p6spy, put the underlying driver in spy.properties
#       e.g. oracle:          oracle.jdbc.driver.OracleDriver
#       e.g. hsqldb:          org.hsqldb.jdbcDriver
#       e.g. postgres:        org.postgresql.Driver
# subjectApi.source.<configName>.param.dbDriver.value = org.hsqldb.jdbcDriver
#
#       e.g. mysql:           jdbc:mysql://localhost:3306/grouper
#       e.g. p6spy (log sql): [use the URL that your DB requires]
#       e.g. oracle:          jdbc:oracle:thin:@server.school.edu:1521:sid
#       e.g. hsqldb (a):      jdbc:hsqldb:dist/run/grouper;create=true
#       e.g. hsqldb (b):      jdbc:hsqldb:hsql://localhost:9001
#       e.g. postgres:        jdbc:postgresql:grouper
# subjectApi.source.<configName>.param.dbUrl.value = jdbc:hsqldb:C:/projects/GrouperI2MI_1-2/grouper/dist/run/grouper
#
# username when connecting to the database
# subjectApi.source.<configName>.param.dbUser.value = sa
#
# password when connecting to the database (or file with encrypted password inside)
# subjectApi.source.<configName>.param.dbPwd.value = 
#
##############################################
#
# Searches (generic)
#
# searchTypes are: 
#   searchSubject: find a subject by ID.  ID is generally an opaque and permanent identifier, e.g. 12345678.  
#        Each subject has one and only on ID.  Returns one result when searching for one ID.
#   searchSubjectByIdentifier: find a subject by identifier.  Identifier is anything that uniquely 
#        identifies the user, e.g. jsmith or jsmith@institution.edu.  
#        Subjects can have multiple identifiers.  Note: it is nice to have if identifiers are unique 
#        even across sources.  Returns one result when searching for one identifier.
#   search: find subjects by free form search.  Returns multiple results.
#
# This is how search params are specified.  Note, each source can have different params for each search type
# subjectApi.source.<configName>.search.<searchType>.param.<paramName>.value = something
#
##############################################
#
# Searches for edu.internet2.middleware.grouper.subj.GrouperJdbcConnectionProvider
#
# searchSubject:
#
#    sql is the sql to search for the subject by id should use an {inclause}
# subjectApi.source.<configName>.search.searchSubject.param.sql.value = select s.subjectid as id, s.name as name, (select sa2.value from subjectattribute sa2 where name='name' and sa2.SUBJECTID = s.subjectid) as lfname, (select sa3.value from subjectattribute sa3 where name='loginid' and sa3.SUBJECTID = s.subjectid) as loginid, (select sa4.value from subjectattribute sa4 where name='description' and sa4.SUBJECTID = s.subjectid) as description, (select sa5.value from subjectattribute sa5 where name='email' and sa5.SUBJECTID = s.subjectid) as email from subject s where {inclause}
#    inclause allows searching by subject for multiple ids or identifiers in one query, must have {inclause} in the sql query, 
#    this will be subsituted to in clause with the following.  Should use a question mark ? for bind variable
# subjectApi.source.<configName>.search.searchSubject.param.inclause.value = s.subjectid = ?
#
# searchSubjectByIdentifier:
#
# subjectApi.source.<configName>.search.searchSubjectByIdentifier.param.sql.value = select s.subjectid as id, s.name as name, (select sa2.value from subjectattribute sa2 where name='name' and sa2.SUBJECTID = s.subjectid) as lfname, (select sa3.value from subjectattribute sa3 where name='loginid' and sa3.SUBJECTID = s.subjectid) as loginid, (select sa4.value from subjectattribute sa4 where name='description' and sa4.SUBJECTID = s.subjectid) as description, (select sa5.value from subjectattribute sa5 where name='email' and sa5.SUBJECTID = s.subjectid) as email from subject s, subjectattribute a where a.name='loginid' and s.subjectid = a.subjectid and {inclause}
# subjectApi.source.<configName>.search.searchSubjectByIdentifier.param.inclause.value = a.value = ? 
#
# search:
#
## search: oracle, hsql, mysql
# subjectApi.source.<configName>.search.search.param.sql.value = select s.subjectid as id, s.name as name, (select sa2.value from subjectattribute sa2 where name='name' and sa2.SUBJECTID = s.subjectid) as lfname, (select sa3.value from subjectattribute sa3 where name='loginid' and sa3.SUBJECTID = s.subjectid) as loginid, (select sa4.value from subjectattribute sa4 where name='description' and sa4.SUBJECTID = s.subjectid) as description, (select sa5.value from subjectattribute sa5 where name='email' and sa5.SUBJECTID = s.subjectid) as email from subject s where s.subjectid in ( select subjectid from subject where lower(name) like concat('%',concat(?,'%')) union select subjectid from subjectattribute where searchvalue like concat('%',concat(?,'%')))
## search: postgres
# subjectApi.source.<configName>.search.search.param.sql.value = select subject.subjectid as id, subject.name as name, lfnamet.lfname as lfname, loginidt.loginid as loginid, desct.description as description, emailt.email as emailfrom subject left join (select subjectid, value as lfname from subjectattribute where name='name') lfnamet on subject.subjectid=lfnamet.subjectid left join (select subjectid, value as loginid from subjectattribute where name='loginid') loginidt on subject.subjectid=loginidt.subjectid left join (select subjectid, value as description from subjectattribute where name='description') desct on subject.subjectid=desct.subjectid left join (select subjectid, value as email from subjectattribute where name='email') emailt on subject.subjectid=emailt.subjectid where (lower(name) like '%' || ? || '%') or (lower(lfnamet.lfname) like '%' || ? || '%') or (lower(loginidt.loginid) like '%' || ? || '%') or (lower(desct.description) like '%' || ? || '%') or (lower(emailt.email) like '%' || ? || '%')
## search: sql server
# subjectApi.source.<configName>.search.search.param.sql.value = select subject.subjectid as id, subject.name as name, lfnamet.lfname as lfname, loginidt.loginid as loginid, desct.description as description, emailt.email as emailfrom subject left join (select subjectid, value as lfname from subjectattribute where name='name') lfnamet on subject.subjectid=lfnamet.subjectid left join (select subjectid, value as loginid from subjectattribute where name='loginid') loginidt on subject.subjectid=loginidt.subjectid left join (select subjectid, value as description from subjectattribute where name='description') desct on subject.subjectid=desct.subjectid left join (select subjectid, value as email from subjectattribute where name='email') emailt on subject.subjectid=emailt.subjectid where (lower(name) like '%' + ? + '%') or (lower(lfnamet.lfname) like '%' + ? + '%') or (lower(loginidt.loginid) like '%' + ? + '%') or (lower(desct.description) like '%' + ? + '%') or (lower(emailt.email) like '%' + ? + '%')
#
##############################################
#
# Params for edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter2
# This is an alternate jdbc source which allows for more complex searches, assumes 
# all data is in one table or view, and that all attributes are single valued.  There are
# not queries to configure in sources.xml
#
# maximum number of results from a search, generally no need to get more than 1000
# subjectApi.source.<configName>.param.maxResults.value = 1000
#
# the table or view to query results from.  Note, could prefix with a schema name
# subjectApi.source.<configName>.param.dbTableOrView.value = person_source_v
#
# the column name to get the subjectId from
# subjectApi.source.<configName>.param.subjectIdCol.value = name
#
# the column name to get the name from
# subjectApi.source.<configName>.param.nameCol.value = 1000
#
# search col where general searches take place, lower case
# subjectApi.source.<configName>.param.lowerSearchCol.value = description_lower
#
# optional col if you want the search results sorted in the API (note, UI might override)
# subjectApi.source.<configName>.param.defaultSortCol.value = description
#
# you can count up from 0 to N of columns to search by identifier (which might also include by id)
# subjectApi.source.<configName>.param.subjectIdentifierCol0.value = pennname
#
# you can count up from 0 to N of columns to search by identifier (which might also include by id)
# subjectApi.source.<configName>.param.subjectIdentifierCol1.value = penn_id
#
# you can count up from 0 to N of attributes for various cols.  The name is how to reference in subject.getAttribute()
# this is the 0th attribute
# subjectApi.source.<configName>.param.subjectAttributeName0.value = PENNNAME
#
# you can count up from 0 to N of attributes for various cols.  The name is how to reference in subject.getAttribute()
# this is the column of the 0th attribute
# subjectApi.source.<configName>.param.subjectAttributeCol0.value = pennname
#
# STATUS SECTION for searches to filter out inactives and allow
# the user to filter by status with e.g. status=all
# this is optional, and advanced
#
# field in database or ldap or endpoint that is the status field
# subjectApi.source.<configName>.param.statusDatastoreFieldName.value = status
#
# search string from user which represents the status.  e.g. status=active
# subjectApi.source.<configName>.param.statusLabel.value = status
#
# available statuses from screen (if not specified, any will be allowed). comma separated list.
# Note, this is optional and you probably dont want to configure it, it is mostly necessary
# when you have multiple sources with statuses...  if someone types an invalid status
# and you have this configured, it will not filter by it
# subjectApi.source.<configName>.param.statusesFromUser.value = Active, Inactive, Pending, All
#
# all label from the user
# subjectApi.source.<configName>.param.statusAllFromUser.value = All
#
# if no status is specified, this will be used (e.g. for active only).  Note, the value should be of the
# form the user would type in
# subjectApi.source.<configName>.param.statusSearchDefault.value = status=active
#
# translate between screen values of status, and the data store value.  Increment the 0 to 1, 2, etc for more translations.
# so the user could enter: status=active, and that could translate to status_col=A.  The 'user' is what the user types in,
# the 'datastore' is what is in the datastore.  The user part is not case-sensitive.  Note, this could be a many to one
# subjectApi.source.<configName>.param.statusTranslateUser0.value = active
#
# subjectApi.source.<configName>.param.statusTranslateDatastore0.value = A
#
###########################################
#
# LDAP params for edu.internet2.middleware.grouper.subj.GrouperJndiSourceAdapter
#
# e.g. com.sun.jndi.ldap.LdapCtxFactory
# subjectApi.source.<configName>.param.INITIAL_CONTEXT_FACTORY.value = com.sun.jndi.ldap.LdapCtxFactory
#
# e.g. ldap://localhost:389
# subjectApi.source.<configName>.param.PROVIDER_URL.value = name
#
# e.g. simple, none, sasl_mech
# subjectApi.source.<configName>.param.SECURITY_AUTHENTICATION.value = simple
#
# e.g. cn=Manager,dc=example,dc=edu
# subjectApi.source.<configName>.param.SECURITY_PRINCIPAL.value = cn=Manager,dc=example,dc=edu
#
# can be a password or a filename of the encrypted password
# subjectApi.source.<configName>.param.SECURITY_CREDENTIALS.value = secret
#
# ldap attribute which is the subject id.  e.g. exampleEduRegID    Each subject has one and only one subject id.  Generally it is opaque and permanent.
# subjectApi.source.<configName>.param.SubjectID_AttributeType.value = exampleEduRegID
#
# if the subject id should be changed to lower case after reading from ldap.  true or false
# subjectApi.source.<configName>.param.SubjectID_formatToLowerCase.value = false
#
# ldap attribute which is the subject name
# subjectApi.source.<configName>.param.Name_AttributeType.value = cn
#
# ldap attribute which is the subject description
# subjectApi.source.<configName>.param.Description_AttributeType.value = description
#
# LdapValidator provides an interface for validating ldap objects when they are in the pool.
# ConnectLdapValidator validates an ldap connection is healthy by testing it is connected.
# CompareLdapValidator validates an ldap connection is healthy by performing a compare operation.
# subjectApi.source.<configName>.param.VTLDAP_VALIDATOR.value = ConnectLdapValidator|CompareLdapValidator
#
# if VTLDAP_VALIDATOR is CompareLdapValidator, this is the DN of the ldap object to get, e.g. ou=People,dc=vt,dc=edu
# subjectApi.source.<configName>.param.VTLDAP_VALIDATOR_COMPARE_DN.value = ou=People,dc=vt,dc=edu
#
# if VTLDAP_VALIDATOR is CompareLdapValidator, this is the filter string, e.g. ou=People
# subjectApi.source.<configName>.param.VTLDAP_VALIDATOR_COMPARE_SEARCH_FILTER_STRING.value = ou=People
#
# searchSubject value searching for %TERM%
# subjectApi.source.<configName>.search.searchSubject.param.filter.value = (& (exampleEduRegId=%TERM%) (objectclass=exampleEduPerson))
#
# Scope Values can be: OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE 
# subjectApi.source.<configName>.search.searchSubject.param.scope.value = SUBTREE_SCOPE
#
# base dn to search in 
# subjectApi.source.<configName>.search.searchSubject.param.base.value = ou=people,dc=example,dc=edu
#
#
# searchSubjectByIdentifier value searching for %TERM%
# subjectApi.source.<configName>.search.searchSubjectByIdentifier.param.filter.value = (& (uid=%TERM%) (objectclass=exampleEduPerson))
#
# Scope Values can be: OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE 
# subjectApi.source.<configName>.search.searchSubjectByIdentifier.param.scope.value = SUBTREE_SCOPE
#
# base dn to search in 
# subjectApi.source.<configName>.search.searchSubjectByIdentifier.param.base.value = ou=people,dc=example,dc=edu
#
#
# search value searching for %TERM%
# subjectApi.source.<configName>.search.search.param.filter.value = (& (|(|(uid=%TERM%)(cn=*%TERM%*))(exampleEduRegId=%TERM%))(objectclass=exampleEduPerson))
#
# Scope Values can be: OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE 
# subjectApi.source.<configName>.search.search.param.scope.value = SUBTREE_SCOPE
#
# base dn to search in 
# subjectApi.source.<configName>.search.search.param.base.value = ou=people,dc=example,dc=edu
#
# attributes from ldap object to become subject attributes.  comma separated
# subjectApi.source.<configName>.attributes = cn, sn, uid, department, exampleEduRegId
#