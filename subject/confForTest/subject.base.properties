#
# Copyright 2014 Internet2
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Subject configuration
# $Id: subject.base.properties,v 1.24 2009-12-30 04:23:02 mchyzer Exp $
#

# The subject proprties uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from subject.base.properties
# (which should not be edited), and the subject.properties overlays
# the base settings.  See the subject.base.properties for the possible
# settings that can be applied to the subject.properties

########################################
## Config chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:subject.example.properties, file:c:/something/myconfig.properties
subject.config.hierarchy = classpath:subject.base.properties, classpath:subject.properties

# seconds between checking to see if the config files are updated
subject.config.secondsBetweenUpdateChecks = 60

########################################

# enter the location of the sources.xml.  Must start with classpath: or file:
# default is: classpath:sources.xml
# e.g. file:/dir1/dir2/sources.xml
# subject.sources.xml.location = classpath:sources.xml
subject.sources.xml.location = classpath:sources.xml

#########################################
## Conversion from sources.xml
#########################################

# generally the <configName> is the same as the source id.  Generally this should not have special characters
# subjectApi.source.<configName>.id = sourceId

# this is a friendly name for the source
# subjectApi.source.<configName>.name = sourceName

# type is not used all that much 
# subjectApi.source.<configName>.type = group | person | 

# the adapter class implements the interface: edu.internet2.middleware.subject.Source
# generally the adapter class should extend: edu.internet2.middleware.subject.provider.BaseSourceAdapter
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter2  :  if doing JDBC this should be used if possible.  All subject data in one table/view.
# edu.internet2.middleware.grouper.subj.GrouperJdbcSourceAdapter   :  oldest JDBC source.  Put freeform queries in here
# edu.internet2.middleware.grouper.subj.GrouperJndiSourceAdapter   :  used for LDAP
# subjectApi.source.<configName>.adapterClass = 

# You can flag a source as not throwing exception on a findAll (general search) i.e. if it is
# ok if it is down.  Generally you probably won't want to do this.  It defaults to true if omitted.
# subjectApi.source.<configName>.param.throwErrorOnFindAllFailure.value = true

#########################################
# You can make virtual attributes (attributes with formatting or based on other attributes) like this:
# init-param name is subjectVirtualAttribute_<index>_<name> where index is the order to be processed
# if some depend on others (0 to 99).  The value is the jexl expression language.  You can use subjectUtils
# methods (aliased with "subjectUtils", or you can register your own class (must have default constructor).
# Here are examples:
#
# This virtual attribute is accessible via: subject.getAttributeValue("loginIdLfNameLoginId");
# subjectApi.source.<configName>.subjectVirtualAttribute_0_loginIdLfName = Hey ${subject.getAttributeValue('LOGINID')} and ${subject.getAttributeValue('LFNAME')}
#
# subjectApi.source.<configName>.subjectVirtualAttribute_1_loginIdLfNameLoginId = ${subject.getAttributeValue('loginIdLfName')} Hey ${subject.getAttributeValue('LOGINID')} and ${subject.getAttributeValue('LFNAME')}
#
# subjectApi.source.<configName>.subjectVirtualAttributeVariable_JDBCSourceAdapterTest = edu.internet2.middleware.subject.provider.JDBCSourceAdapterTest
#
# subjectApi.source.<configName>.subjectVirtualAttribute_2_loginIdSquared = ${JDBCSourceAdapterTest.appendToSelf(subject.getAttributeValue('LOGINID'))}
#
#########################################
#
# you can set these c3p0 settings: 
# 
# seconds of max connection age
# subjectApi.source.<configName>.param.maxConnectionAge.value = 600
# 
# subjectApi.source.<configName>.param.testConnectionOnCheckout.value = true|false
#
# subjectApi.source.<configName>.param.preferredTestQuery.value = select 1 from dual
# 
# seconds between tests of idle connections in pool
# subjectApi.source.<configName>.param.idleConnectionTestPeriod.value = 600
#
##########################################
#
# Check config is when a source is having diagnostics run (e.g. on a system health check)
# 
# if a system check should try to resolve a subject by id on this source
# subjectApi.source.<configName>.param.findSubjectByIdOnCheckConfig.value = true
#
# by default it will try to find a random string.  If you want a speicific ID to be found enter that here
# subjectApi.source.<configName>.param.subjectIdToFindOnCheckConfig.value = someSubjectIdWhichMightExistOrWhatever
#
# by default it will do a search by subject identifier
# subjectApi.source.<configName>.param.findSubjectByIdentifiedOnCheckConfig.value = true
#
# by default it will use a random value for subject identifier to lookup, you can specify a value here
# subjectApi.source.<configName>.param.subjectIdentifierToFindOnCheckConfig.value = someSubjectIdentifierWhichMightExistOrWhatever
#
# by default it will search for a subject by string
# subjectApi.source.<configName>.param.findSubjectByStringOnCheckConfig.value = true
#
# you can specify the search string here or it will be a random value
# subjectApi.source.<configName>.param.stringToFindOnCheckConfig.value = someStringWhichMightExistOrWhatever
#
###########################################
#
# Attribute metadata
# 
# subjectApi.source.<configName>.param.sortAttribute0.value = name
# subjectApi.source.<configName>.param.searchAttribute0.value = anotherName
# subjectApi.source.<configName>.internalAttribute0 = someName
#
###########################################
#
# LDAP params
#
# e.g. com.sun.jndi.ldap.LdapCtxFactory
# subjectApi.source.<configName>.param.INITIAL_CONTEXT_FACTORY.value = com.sun.jndi.ldap.LdapCtxFactory
#
# e.g. ldap://localhost:389
# subjectApi.source.<configName>.param.PROVIDER_URL.value = name
#
# e.g. simple
# subjectApi.source.<configName>.param.SECURITY_AUTHENTICATION.value = simple
#
# e.g. cn=Manager,dc=example,dc=edu
# subjectApi.source.<configName>.param.SECURITY_PRINCIPAL.value = cn=Manager,dc=example,dc=edu
#
# can be a password or a filename of the encrypted password
# subjectApi.source.<configName>.param.SECURITY_CREDENTIALS.value = secret
#
# 
# subjectApi.source.<configName>.param.SubjectID_AttributeType.value = exampleEduRegID
#
# 
# subjectApi.source.<configName>.param.SubjectID_formatToLowerCase.value = false
#
# 
# subjectApi.source.<configName>.param.Name_AttributeType.value = cn
#
# 
# subjectApi.source.<configName>.param.Description_AttributeType.value = description
#
# 
# subjectApi.source.<configName>.param.VTLDAP_VALIDATOR.value = ConnectLdapValidator|CompareLdapValidator
#
# 
# subjectApi.source.<configName>.param.VTLDAP_VALIDATOR_COMPARE_DN.value = ou=People,dc=vt,dc=edu
#
# 
# subjectApi.source.<configName>.param.VTLDAP_VALIDATOR_COMPARE_SEARCH_FILTER_STRING.value = ou=People
#
