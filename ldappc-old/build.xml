<?xml version="1.0"?>

<!--
    Build file for creating the ldappc program.
-->
<project name="Build ldappc program" default="interactive" basedir=".">
    <description>
        Build and run ldappc.
    </description>
        
    <!-- 
        The script is run from ldappc directory which contains the following
        subdirectories: doc, lib, src, etc., and which contains this build.xml file. 

        Notation:
        gsDataDir is the directory that contains the Grouper and Signet configuration and 
        database data for testing.  
    -->

    <!--
        ********** VERSION ********** version
     -->
     <target name="version" >

        <tstamp/>
        <property name="impl.url" value="http://middleware.internet2.edu/to-be-determined/ldappc/"/>
        <property name="impl.vendor"            value="Internet2"/>
        <property name="impl.version"           value="1.1"/>
        <echo message="Ldappc Build File Version: ${impl.version} on ${DSTAMP} at ${TSTAMP}" />

    </target>

    <!--
        ********** INTERACTIVE SCRIPT ********* interactive
     -->

    <target name="interactive" depends="version">
        <echo message="Entering interactive script mode."/>
        <echo message="The following is a list of commonly used targets.  Select one of them."/>
        <echo message="help: provides access to the help menus."/>
        <echo message="install: Use only once to clean the build file, build, and run test cases."/>
        <echo message="test: Run the test cases."/>
        <echo message="docs: Generate the Javadocs in the doc/javadoc directory."/>
        <echo message="x: execute Ldappc using the testLdappc.properties file."/>
        <echo message="cbxJunit: Compile, build, and execute the test cases."/>
        <echo message=""/>

         <input
             message="Enter the name of desired target.  "
             validargs="help,install,test,docs,cbx,cbxJunit"
             addproperty="selectedTarget"/>
        <antcall target="${selectedTarget}"/>
    </target>

    <!-- 
        *************************************************
        ********** BUILD SCRIPT HELP SECTION. ***********
        *************************************************
    -->
    
    <!--
        ********** HELP ********* help
     -->

    <target name="help">
         <echo message="Refer to the README.txt file for information on where to"/>
         <echo message="find installation and user documentation. Be sure to read the"/>
         <echo message="DeploymentGuide before running Ant (other than ant help)" />
         <echo message="for the first time." />
         <echo message=" "/>
         <echo message="The first time you run this script, use either 'ant help' or 'ant install'."/>
         <echo message=" " />
         <echo message="To use ant, change your directory to the directory containing the build file." />
         <echo message="For Ldappc, this is under the installation directory." />
         <echo message="The default build file used when none is specified is build.xml." />
         <echo message="Most Ldappc functions can be accessed from this default build file" />
         <echo message="by using: ant name_of_target" />
         <echo message=" "/>
         <echo message="Below is a list of the most common targets and descriptions thereof."/>
         <echo message="Use 'ant theTargetName' to execute the target."/>
         <echo message=" "/>
         <echo message="Target              Description" />
         <echo message="------              -----------" />
         <echo message="(none)              Interactive mode: prompts the user for the Ant target." />
         <echo message="test                Compiles, builds and runs built-in JUnit test cases."/>
         <echo message="cbx                 Compiles, builds and runs Ldappc." />
         <echo message="cbxJunit            Compiles, builds and runs specified JUnit test cases." />
         <echo message="install             Cleans build directory, compiles, builds and runs built-in test cases ." />
         <echo message=" "/>
         <echo message="When using cbxJunit make sure to use the -Dmaster parameter to select" />
         <echo message="the test set directory containing the built-in JUnit test cases "/>
         <echo message="or other user-created test cases.  (See the Deployment Guide for"/>
         <echo message="more information on this.)"/>

    </target>

    <!-- 
        **********************************************
        ********** PROPERTY SETUP SECTION. ***********
        **********************************************
    -->

    <!-- 
        ********** Start ********* start
        TODO:  need to log the runs
     -->
    <target name="start" depends="version">

        <property environment="env"/>
        <property name="app" value="ldappc"/>
            
    </target>

    <!--
        ********** GET PROPERTIES FILES ********* getPropertiesFiles
    -->

    <target name="setMasterToTest">
        <!-- 
            Set the master properties file to point to testSetU
            if target is install or test.  
        -->
        <property name="master" value="conf/testConfigurations/testSetU/antMaster.properties"/>
    </target>

    <!--
        ********** GET PROPERTIES FILES ********* getPropertiesFiles
    -->

    <target name="getPropertiesFiles" depends="start">
        <echo message="basedir=${basedir}"/>

        <!--
            READ MASTER PROPERTIES FILE
            Read in the optional ant master file that selects the ant system properties
            file and the ant application properties file.  If not used, the default values of
            antsystem.properties is used.  The the main purpose of the 
            antMaster.properties file is to allow switching between different versions of
            these two properties files.
         -->
        <property name="master" value="antMaster.properties"/>
        <property file="${master}" />
        <!-- If there was no ant master properties file set, then set the application configuration 
             directory to the default value, conf.
         -->
        <property name="applicationConfigDir" value="conf"/>
        <property name="systemPropertiesFile" value="${applicationConfigDir}/antSystem.properties" />

    </target>

    <!--
        ********** READ SYSTEM PROPERTIES ********* readSystemProperties
    -->

    <target name="readSystemProperties" depends="getPropertiesFiles">
        <!--
            Read the system properties file
         -->

        <property file="${systemPropertiesFile}" />
        <condition property="propFilesOk" >
            <and>
                <available file="${systemPropertiesFile}" />
            </and>
        </condition>         
        
        <property name="libraryDir" value="lib"/>

        <condition property="javacName" value="javac.exe">
            <os family="windows"/>
        </condition>
        <condition property="javacName" value="javac">
            <os family="unix"/>
        </condition>
        
        <condition property="javaName" value="java.exe">
            <os family="windows"/>
        </condition>
        <condition property="javaName" value="java">
            <os family="unix"/>
        </condition>

        <!--
            Display the system properties file
            TODO: Remove this, display after build script settings.
         -->

        <echo message="*** Property Files Contents ***" />
        <echo message="master=${master}" />
        <echo message="applicationConfigDir=${applicationConfigDir}" />
        <echo message="systemPropertiesFile=${systemPropertiesFile}" />
        <echo message="runDatabase=${runDatabase}" />
        <echo message="jvmbase=${jvmbase}" />
        <echo message="javacName=${javacName}" />
        <echo message="javaName=${javaName}" />
        <echo message="libraryDir=${libraryDir}" />
        <echo message="grouper.conf=${grouper.conf}" />
        <echo message="grouper.hsqldb=${grouper.hsqldb}" />
        <echo message="signet.conf=${signet.conf}" />
        <echo message="signet.hsqldb=${signet.hsqldb}" />
        <echo message="noStopDb=${noStopDb}" />
        <property name="hsqldbServer" value="127.0.0.1"/>


    </target>

    <!-- 
        ********** CHECK THE PROPERTIES FILES ********** checkPropertiesFiles
    -->

    <target name="checkPropertiesFiles" depends="readSystemProperties" unless="propFilesOk" >
        <echo message="The system properties file was not found."/>
        <echo message="The file searched for was ${systemPropertiesFile}."/>
        <echo message="Check the contents of the ${applicationConfigDir} directory."/>
        <echo message="Typically this will be located in the conf directory or some subdirectory of conf."/>
        <fail message="Missing properties directory: ${systemPropertiesFile}."/>
    </target>


    <!-- 
        ********** Set the system-independent properties ********* setProperties
    -->
 
    <target name="setProperties" depends="checkPropertiesFiles">

        <!-- Set jvmbase from JAVA_HOME if not already set above. -->
        <property name="jvmbase" value="${env.JAVA_HOME}"/>

        <!-- input names and directories -->
        <property name="basedir.src" location="${basedir}/src"/>
        <property name="basedir.doc" location="${basedir}/doc"/>
        <property name="basedir.conf" location="${basedir}/conf"/>
        <property name="basedir.src.java" location="${basedir.src}/java"/>
        <property name="basedir.src.schemadir" location="${basedir.src.java}/edu/internet2/middleware/${app}/schema"/>
        <property name="basedir.doc.javadoc" location="${basedir.doc}/javadoc"/>
        <property name="basedir.lib" value="${basedir}/${libraryDir}"/>
        <property name="javacexe" value="${jvmbase}/bin/${javacName}"/>
        <property name="javaexe" value="${jvmbase}/bin/${javaName}"/>
        <property name="hsqldbJar" value="hsqldb.jar"/>
        <property name="basedir.lib.hsqldbJar" location="${basedir.lib}/${hsqldbJar}"/>
        <property name="builtInTestDatabaseName" value="testDb"/>
        <property name="builtInTestDatabaseDir" location="${basedir}/testDb"/>
        <!-- the gsDataDir directory must be directly under the base directory to be recognized. -->
        <!-- TODO: Add a property to allow a different base for the standard format data. -->
        <property name="gsDataDir" location="${builtInTestDatabaseDir}"/>
        <echo message="gsDataDir=${gsDataDir}"/>
        <!-- If the standard directory location, gsDataDir, has not yet been set, then
             use the value of the default standard directory location, which is
             that of the built-in test database.
         -->
        <property name="testIfGsDataDirIsSameAsTestDb" location="${basedir}/${builtInTestDatabaseName}"/>
        <condition property="setTestDb">
            <equals arg1="${gsDataDir}" arg2="${testIfGsDataDirIsSameAsTestDb}"/>
        </condition>

        <!-- output directories -->
        <property name="builddir" location="build"/>
        <property name="buildapp" location="${builddir}/${app}"/>
        <property name="buildapp.classes" location="${buildapp}/classes"/>
        <property name="buildapp.schemadir" location="${buildapp.classes}/edu/internet2/middleware/${app}/schema"/>
        <property name="buildapp.lib" location="${buildapp}/lib"/>
        <property name="buildapp.logs" location="${buildapp}/logs"/>
        <property name="buildapp.conf" location="${buildapp}/conf"/>

        <property name="distdirName" value="distributions"/>
        <property name="distdir" location="${basedir}/${distdirName}"/>
        <property name="distdir.src" location="${distdir}/src"/>
        <property name="distdir.conf" location="${distdir}/conf"/>
        <property name="distdir.doc" location="${distdir}/doc"/>
        <property name="distdir.doc.javadoc" location="${distdir.doc}/javadoc"/>
        <property name="distdir.lib" location="${distdir}/lib"/>
        <property name="distdir.src" location="${distdir}/src"/>
        <property name="distdir.src.java" location="${distdir.src}/java"/>
        <property name="distdir.testDb" location="${distdir}/testDb"/>
        <property name="distdir.buildXml" location="${distdir}/build.xml"/>

        <property name="tests" value="edu.internet2.middleware.ldappcTest.AllJUnitTests" />
        <property name="verboseDeletes" value="false"/>
        <property name="buildapp.doc" value="${buildapp}/doc"/>
        <!--
        <property name="buildapp.doc.javadoc" value="${buildapp.doc}/javadoc"/>
         -->
        <property name="javadocPackages" 
                value="edu.internet2.middleware.ldappc.*,edu.internet2.middleware.ldappcTest.*" />
        <property name="logdir" value="${basedir}/logs" />
        <property name="outputdir" value="${basedir}/output" />

        <!--
         sample:
         <property name="javadocExcludePackageNames" value="xxx.yyy.*,aaa.bbb.**.*" />
         -->
    </target>

    <!-- 
        ********** Set property for running the database if using testDb ********* testDbSetting
    -->
 
    <target name="testDbSetting" depends="setProperties" if="setTestDb">
        <property name="runDatabase" value="runDb"/>
    </target>

    <!-- 
        ********** Display the properties ********* showProperties
    -->
 
    <target name="showProperties" depends="testDbSetting">
  
        <echo message="*** input directories ***"/>

        <echo message="Property value output follows."/>
        <echo message="app=${app}"/>
        <echo message="applicationConfigDir=${applicationConfigDir}"/>
        <echo message="basedir.src=${basedir.src}"/>
        <echo message="basedir.src.java=${basedir.src.java}"/>
        <echo message="basedir.lib=${basedir.lib}"/>
        <echo message="jvmbase=${jvmbase}"/>
        <echo message="javacexe=${javacexe}"/>
        <echo message="javaexe=${javaexe}"/>

        <echo message="*** output directories ***"/>

        <echo message="distdir=${distdir}"/>
        <echo message="distdir.src=${distdir.src}"/>
        <echo message="distdir.doc=${distdir.doc}"/>
        <echo message="distdir.doc.javadoc=${distdir.doc.javadoc}"/>
        <echo message="builddir=${builddir}"/>
        <echo message="buildapp=${buildapp}"/>
        <echo message="buildapp.lib=${buildapp.lib}"/>
        <echo message="buildapp.classes=${buildapp.classes}"/>
        <echo message="buildapp.conf=${buildapp.conf}"/>
        <echo message="tests=${tests}"/>
        <echo message="noDbStop=${noDbStop}"/>
  </target>

    <!-- 
        *******************************************
        ********** COMPILATION SECTION. ***********
        *******************************************
    -->

    <!-- 
        ********** Create the compiliationclasspath ********* setCompileClasspath
    -->
  
    <target name="setCompileClasspath" depends="showProperties">

        <echo message="Setting project compilation classpath with the following paths:"/>
        <echo message="${basedir.src.java}"/>
        <echo message="${basedir.lib}/${hsqldbJar}"/>
        <echo message="${basedir.lib} with included **/*.jar"/>

        <path id="compileClasspath">
            <pathelement location="${basedir.src.java}"/>
            <pathelement location="${basedir.lib}/${hsqldbJar}"/>
            <fileset dir="${basedir.lib}">
                <include name="**/*.jar"/>
            </fileset>

        </path>
        <!-- Display the classpath -->
        <pathconvert targetos="windows" property="compilePathDisplay" refid="compileClasspath"/>
        <echo message="compilePathDisplay=${compilePathDisplay}"/>
         
    </target>

    <!-- 
        ********** Initialize by building directories. ********** makeDirectories
    -->
  
    <target name="makeDirectories" depends="setCompileClasspath">

        <!-- Create the build directory structure used by compile -->

        <mkdir dir="${builddir}"/>
        <mkdir dir="${buildapp}"/>
        <mkdir dir="${buildapp.classes}"/>
        <mkdir dir="${buildapp.schemadir}"/>
        <mkdir dir="${buildapp.conf}"/>
        <mkdir dir="${buildapp.lib}"/>
        <mkdir dir="${buildapp.logs}"/>
        <mkdir dir="${logdir}"/>
        <mkdir dir="${outputdir}"/>

    </target>

    <!-- 
        ********** Compiles the java sources. ********** compile
    -->
    
    <target name="compile" depends="makeDirectories" >
        <echo message="Compiling from ${basedir.src.java} to ${buildapp.classes} directory."/>
        <javac destdir="${buildapp.classes}"
              classpathref="compileClasspath"
              fork="yes"
              deprecation="on"
              executable="${javacexe}"
              srcdir="${basedir.src.java}"
              debug="on">
        </javac>

    </target>

    <!-- 
        ******************************************
        ********** BUILD COPY SECTION. ***********
        ******************************************
    -->

    <!-- 
        ********** Do build copying ********** doBuildCopying
    -->
    
    <target name="doBuildCopying" depends="compile" >

        <echo message="Starting section of targets for copying files to the build directories."/>
        <!-- sourcesXmlDir must be set in a properties file 
             if not using the applicationConfigDir
         -->
        <!-- Getting sources from app config dir if not set yet. -->
        <property name="sourcesXmlDir" value="${applicationConfigDir}" />
        <property name="sourcesXml" value="${sourcesXmlDir}/sources.xml"/>
        <antcall target="copyconfig"/>
        <antcall target="copyxsd"/>
        <antcall target="copysourcetestdata"/>
        
    </target>

    <!-- 
        ********** Copy all library files to the build lib directory. ********** copylib
    -->

    <!-- Do not need this step unless we have to select libraries from the main lib
         directory, such as if there are two competing versions of a jar file.
         If this is needed, the we also need to use the buildapp.lib directory
         instead of the basedir.lib directory for the build classpath later on.
     -->
    <!-- 
    <target name="copylib" depends="setCopyFiles">
        <echo message="Copying all needed files from ${basedir.lib} to ${buildapp.lib}"/>
        <copy todir="${buildapp.lib}">
            <fileset dir="${basedir.lib}">
                <exclude name="*.swp"/>
                <include name="*"/>
            </fileset>
        </copy>
    </target>
     -->

    <!-- 
        ********** Copy the configuration directory to the build directory. ********** copyconfig
    -->

    <target name="copyconfig">
        <echo message="Copying all files from ${applicationConfigDir} to ${buildapp.conf}"/>
        <copy todir="${buildapp.conf}">
            <fileset dir="${applicationConfigDir}">
                <include name="**"/>
             </fileset>
        </copy>
        <echo message="Copying ${sourcesXml} todir=${buildapp.conf}"/>
        <!-- Overwrite any existing sources.xml file that may have come from Grouper and
             Signet conf directories as the user must combine them into a single sources.xml
             file to be used in the build classpath.  This file must be at the 
             ${sourcesXml} location. The sources.xml file needs to be in the
             same directory as the other configuration files. -->
        <copy overwrite="true" file="${sourcesXml}" todir="${buildapp.conf}"/>
    </target>

    <!-- 
    ********** Copy xsd files to the build directory. ********** copyxsd
     (currently only schema.xsd exists)
    -->

    <target name="copyxsd" >
        <echo message="Copying all .xsd files from ${basedir.src.schemadir} to ${buildapp.schemadir}"/>
        <copy todir="${buildapp.schemadir}">
            <fileset dir="${basedir.src.schemadir}">
                <include name="*.xsd"/>
             </fileset>
        </copy>
    </target>

    <!-- 
        ********** Copy the source data directories for testing. ********** copysourcetestdata
    -->
    <target name="copysourcetestdata" >
        <echo message="Copying all test data files from ${basedir.src.java} to ${buildapp.classes}"/>
        <copy todir="${buildapp.classes}">
            <fileset dir="${basedir.src.java}">
                <include name="**/ldappcTest/**/data/**"/>
             </fileset>
        </copy>
    </target>

    <!-- 
        *************************************
        ********** BUILD SECTION. ***********
        *************************************
    -->

    <!-- 
        ********** Set test properties ********* setTestProperties
        (Sets properties whenever a data directory exists)
    -->
 
    <target name="setTestProperties" depends="doBuildCopying">

        <!-- properties for the grouper and signet test databases -->
        <!-- 
            CHANGING database.port, grouper.dbname, signet.dbname REQUIRES
            MANY ADDITIONAL CHANGES OUTSIDE OF THE BUILD FILE. 
          -->
        <property name="sqltoolDir" value="${gsDataDir}"/>
        <property name="sqltool.rc" location="${sqltoolDir}/sqltool.rc"/>
        <!-- TODO: use this only if runDatabase is set -->
        <property name="database.port" value="51515"/>
        
        <property name="grouper.conf" location="${gsDataDir}/grouper/conf"/>
        <property name="grouper.hsqldb" location="${gsDataDir}/grouper/hsqldb"/>
        <property name="grouper.dbname" value="grouperdb"/>
        <property name="grouper.database" location="${grouper.hsqldb}/grouper"/>
        
        <property name="signet.conf" location="${gsDataDir}/signet/conf"/>
        <property name="signet.hsqldb" location="${gsDataDir}/signet/hsqldb"/>
        <property name="signet.dbname" value="signetdb"/>
        <property name="signet.database" location="${signet.hsqldb}/signet"/>

    </target>

    <!--
        ********** PROPERTY CHECKING TASK ********** checkingTask
     -->
    <target name="checkingTask" depends="setTestProperties">

        <taskdef name="propertyChecker" 
            classname="edu.internet2.middleware.ldappcTest.ants.PropertyCheckerTask" 
            classpath="${buildapp.classes}"/>
        <propertyChecker stage="build"/>

    </target>

    <!--
        ********** DISPLAY PROPERTY ALERT ********** propertyAlert
     -->
    <target name="propertyAlert" depends="checkingTask" if="propertyAlert">
        <echo message="${propertyAlert}"/>
    </target>

    <!--
        **********  WARN IF BUILD FILES ARE NOT AVAILABLE ********* warnIfBuildFilesNotAvailable
    -->
    <!--
    <target name="warnIfBuildFilesNotAvailable" depends="propertyAlert" unless="buildFilesAreAvailable">
        <echo message="One of the following files was not found or properties were not set:"/>
        <echo message="${buildapp.conf}, ${basedir.lib}"/>
        <echo message="${grouper.conf}, ${signet.conf},"/>
        <echo message="${grouper.hsqldb}, ${signet.hsqldb},"/>
        <echo message="${buildapp.classes}"/>

        <echo message="Missing a build file; this will cause a failure unless you are running"/>
        <echo message="only one of Grouper or Signet."/>
    </target>
     -->

    <!-- 
        ********** Create the build classpath if a test ********* setBuildClasspathIsaTest
    -->
  
    <target name="setBuildClasspathIsaTest" depends="propertyAlert">

        <echo message="Setting project build classpath with the following paths:"/>
        <!-- Must have this hsqldb jar file first. -->
        <echo message="${basedir.lib.hsqldbJar}"/>
        <echo message="${buildapp.conf}"/>
        <echo message="${grouper.conf} with selected includes"/>
        <echo message="${signet.conf} with selected includes"/>
        <echo message="${grouper.hsqldb} with selected includes"/>
        <echo message="${signet.hsqldb} with selected includes"/>
        <echo message="${basedir.lib} with jar includes: **/*.jar"/>
        <echo message="${buildapp.classes}"/>

        <path id="buildClasspath">
            <pathelement location="${basedir.lib.hsqldbJar}"/>
            <pathelement location="${buildapp.conf}"/>
            <pathelement location="${grouper.conf}"/>
            <pathelement location="${signet.conf}"/>
            <pathelement location="${grouper.hsqldb}"/>
            <pathelement location="${signet.hsqldb}"/>

            <fileset dir="${grouper.conf}">
                <include name="ehcache.xml"/>
                <include name="grouper.hibernate.properties"/>
                <include name="grouper.properties"/>
            </fileset>

            <fileset dir="${grouper.hsqldb}">
                <include name="grouper.properties"/>
                <include name="grouper.script"/>
            </fileset>

            <fileset dir="${signet.conf}">
                <include name="hibernate.cfg.xml"/>
            </fileset>

            <fileset dir="${signet.hsqldb}">
                <include name="signet.properties"/>
                <include name="signet.script"/>
            </fileset>

            <fileset dir="${basedir.lib}">
                <include name="**/*.jar"/>
            </fileset>

            <pathelement location="${buildapp.classes}"/>
        </path>
        <!-- Display the classpath -->
        <pathconvert targetos="windows" property="buildPathDisplay" refid="buildClasspath"/>
        <echo message="buildPathDisplay=${buildPathDisplay}"/>
    </target>
    
    <!--
       *********** BUILD ****** build
      -->
    <target name="build" depends="setBuildClasspathIsaTest" description="Display port status">
    </target>


    <!-- 
        ************************************************
        ********** DATABASE CONTROL SECTION. ***********
        ************************************************
    -->
    
    <!--
       *********** DISPLAY DATABASE PORT STATUS ****** displayDatabasePortStatus1
      -->
    <target name="displayDatabasePortStatus1" depends="build" description="Display port status">

        <echo message="Display port status for commonly used ports."/>
        <echo message="If ports are already in use, a failure may occur"/>
        <echo message="if you are starting the databases from this script."/>
        <condition property="databasePortStatus9001" value="open">
            <socket server="${hsqldbServer}" port="9001"/>
        </condition>
        <property name="databasePortStatus9001" value="closed"/>
        <echo message="Status for port 9001=${databasePortStatus9001}"/>

        <condition property="databasePortStatus9002" value="open">
            <socket server="${hsqldbServer}" port="9002"/>
        </condition>
        <property name="databasePortStatus9002" value="closed"/>
        <echo message="Status for port 9002=${databasePortStatus9002}"/>

        <condition property="databasePortStatus8080" value="open">
            <socket server="${hsqldbServer}" port="8080"/>
        </condition>
        <property name="databasePortStatus8080" value="closed"/>
        <echo message="Status for port 8080=${databasePortStatus8080}"/>
    </target>
    
    <!--
       *********** START THE SIGNET AND GROUPER DB ****** startDb
       TODO: provide parameters and cod for handling only Grouper or only Signet
      -->
    <target name="startDb" depends="displayDatabasePortStatus1" description="Start the database" if="runDatabase">
        <echo message="Starting HSQLDB server"/>

        <condition property="databasePortStatus" value="open">
            <socket server="${hsqldbServer}" port="${database.port}"/>
        </condition>
        <property name="databasePortStatus" value="closed"/>
        <echo message="databasePortStatus for ${database.port}=${databasePortStatus}"/>
        <echo message="Classpath is: ${basedir.lib.hsqldbJar}"/>
        <echo message="Classpath is: ${grouper.hsqldb}"/>
        <echo message="Classpath is: ${signet.hsqldb}"/>
        <echo message="Run java org.hsqlsb.Server with the following arguments:"/>
        <echo message="-port ${database.port} -database.0 ${grouper.database} -dbname.0 ${grouper.dbname} 
                    ${line.separator}
                    -database.1 ${signet.database} -dbname.1 ${signet.dbname}" />
        <java fork="yes" spawn="yes" classname="org.hsqldb.Server" jvm="${javaexe}">
            <jvmarg value="-Xmx300M"/>
            <arg line="-port ${database.port} -database.0 ${grouper.database} -dbname.0 ${grouper.dbname} 
                    -database.1 ${signet.database} -dbname.1 ${signet.dbname}" />
            <classpath>
                <pathelement location="${basedir.lib.hsqldbJar}"/>
                <pathelement location="${grouper.hsqldb}"/>
                <pathelement location="${signet.hsqldb}"/>
            </classpath>
        </java>

        <!-- wait for at most 30 seconds-->
        <waitfor maxwait="30000" timeoutproperty="hsqldbTimeout">
            <and>
                <socket server="${hsqldbServer}" port="${database.port}"/>
            </and>
        </waitfor>
        
    </target>


    <!-- 
        ********** Fail if can not start the databases ********* failIfDbNotStarted
    -->
  
    <target name="failIfDbNotStarted" depends="startDb" if="hsqldbTimeout">
        <fail message="The database did not start up in the allowed time."/>
    </target>

    <!--
       *********** DISPLAY DATABASE PORT STATUS ****** displayDatabasePortStatus1
      -->
    <target name="displayDatabasePortStatus2" depends="failIfDbNotStarted" description="display port status">

        <condition property="databasePortStatus9001" value="open">
            <socket server="${hsqldbServer}" port="9001"/>
        </condition>
        <property name="databasePortStatus9001" value="closed"/>
        <echo message="Status for port 9001=${databasePortStatus9001}"/>

        <condition property="databasePortStatus9002" value="open">
            <socket server="${hsqldbServer}" port="9002"/>
        </condition>
        <property name="databasePortStatus9002" value="closed"/>
        <echo message="Status for port 9002=${databasePortStatus9002}"/>

        <condition property="databasePortStatus8080" value="open">
            <socket server="${hsqldbServer}" port="8080"/>
        </condition>
        <property name="databasePortStatus8080" value="closed"/>
        <echo message="Status for port 8080=${databasePortStatus8080}"/>
        
    </target>

       
    <!--
        ********** RUN Ldappc ********** dbclean
    -->
    <target name="dbcleanInternal" depends="startDb" description="INTERNAL TARGET - do not call directly" >

        <java fork="yes" classname="edu.internet2.middleware.ldappcTest.dbBuilder.DatabaseCleaner">
             <classpath refid="buildClasspath"/>
        </java>
    </target>   
       
    <target name="dbclean" depends="dbcleanInternal,stopDbInternal" description="run DatabaseCleaner" >
    </target>

    <!-- 
        *************************************************
        ********** PROGRAM EXECUTION SECTION. ***********
        *************************************************
    -->

    <!--
        ********** RUN JUNIT TESTS ********** runJunit
     -->
    <target name="runJunitInternal" depends="displayDatabasePortStatus2" description="INTERNAL TARGET - do not call directly" >
        <property name="testIncludes" value="${tests}" />
        <java fork="yes" classname="junit.textui.TestRunner" 
             classpathref="buildClasspath"
             jvm="${javaexe}"
             taskname="junit" failonerror="false">
             <jvmarg value="-Xmx300M"/>
             <arg value="${testIncludes}"/>
        </java>
    </target>
    
    <target name="runJunit" depends="runJunitInternal,stopDbInternal" description="run JUnit tests">
        <tstamp>
            <format property="endtime" pattern="MM/dd/yyyy hh:mm aa" />
        </tstamp>
        <echo message="${endtime}" />

    </target>
    
    <!--
        ********** RUN Ldappc ********** dbJunitAndClean
     -->
    <target name="dbJunitAndCleanInternal" depends="runJunitInternal" description="INTERNAL TARGET - do not call directly" >

        <java fork="yes" classname="edu.internet2.middleware.ldappcTest.dbBuilder.DatabaseCleaner"
            jvm="${javaexe}">
            <classpath refid="buildClasspath"/>
        </java>
    </target>
    
    <target name="dbJunitAndClean" depends="dbJunitAndCleanInternal,stopDbInternal" description="run Ldappc JUnit tests and db cleaner" >
    </target>
    
    <!--
        ********** RUN Ldappc ********** run     
    -->
    <target name="runInternal" depends="runJunitInternal" description="INTERNAL TARGET - do not call directly" >       
        <tstamp>
            <format property="endtime" pattern="MM/dd/yyyy hh:mm aa" />
        </tstamp>
        <echo message="${endtime}" />
    </target>
    
    <!--
        ********** JUnit Compile, build and Execute ********** cbxJunit     
    -->
    <target name="cbxJunit" depends="runInternal" description="run Ldappc JUnit tests" >
        <antcall target="stopDbInternal"/> 
    </target>
    
    <!--
        ********** JUnit Compile, build and Execute ********** test     
    -->
    <!--
        Currently test is just another name for cbxJunit, which goes through the 
        compile and build steps as wells as runs the built-in test cases.  It would
        be nice to be able to skip the compilation and build steps, but Ant does not
        make it easy to do this without a lot of conditions or nearly duplicate targets,
        so this is being postponed.
    -->
    <target name="test" depends="setMasterToTest,cbxJunit" description="run Ldappc JUnit tests" >

    </target>
    
    <!--
        ********** Cleans, compiles, builds and Executes Built-in JUnit test cases ********** install     
    -->
    <target name="install" depends="setMasterToTest,clean,cbxJunit" description="Install and run Ldappc JUnit tests" >
    </target>
       
        <!--
            ********** RUN Ldappc ********** displayInternal
         -->
        <target name="displayInternal" depends="startDb" description="INTERNAL TARGET - do not call directly" >

            <java fork="yes" classname="edu.internet2.middleware.ldappcTest.dbBuilder.DatabaseDisplayer">
                <classpath refid="buildClasspath"/>
            </java>
        </target>   
       
    <target name="display" depends="displayInternal,stopDbInternal" description="display database" >
    </target>
    
    <!--
        ********** RUN Ldappc ********** xInternal
     -->
    <target name="xInternal" depends="startDb" description="INTERNAL TARGET - do not call directly" >

        <!-- use "GrouperSystem" as the subject for most testing -->
        <input message="Input the subject:"
            addproperty="subject"/>
        <echo message="subject=${subject}"/> 

        <input message="Input '-groups' to process groups, return to ignore:"
            addproperty="groups"/>
        <echo message="groups=${groups}"/> 
  
        <input message="Input '-memberships' to process memberships, return to ignore:"
            addproperty="memberships"/>
        <echo message="memberships=${memberships}"/> 

        <input message="Input '-permissions' to process permissions, return to ignore:"
            addproperty="permissions"/>
        <echo message="permissions=${permissions}"/> 

        <input message="Input '-lastModifyTime the_last_modify_time' (yyyy-MM-dd_hh:mm:ss) or return to skip:"
            addproperty="lastModifyTime"/>
        <echo message="lastModifyTime=${lastModifyTime}"/> 

        <input message="Input '-interval the_interval' (in secs.) or return to skip:"
            addproperty="interval"/>
        <echo message="interval=${interval}"/> 

        <input message="Input '-configManager the_configManager_URI' or return to skip:"
            addproperty="configManager"/>
        <echo message="configManager=${configManager}"/> 

        <echo message="The command line arguments are: "/>
        <echo message="    -subject ${subject} ${groups} ${memberships} ${permissions} ${lastModifyTime} 
            ${interval} ${configManager}"/>

        <java fork="yes" classname="edu.internet2.middleware.ldappc.Ldappc" jvm="${javaexe}">
                <jvmarg value="-Xmx300M"/>
                <arg line="-subject ${subject} ${groups} ${memberships} ${permissions} ${lastModifyTime} ${interval}
                    ${configManager}"/>
            <classpath refid="buildClasspath"/>
        </java>
        
        <tstamp>
            <format property="endtime" pattern="MM/dd/yyyy hh:mm aa" />
        </tstamp>
        <echo message="${endtime}" />

    </target>
       

    <!--
        ********** COMPILE, BUILD, AND EXECUTE AUTH2LDAP ********** cbx
     -->
    <target name="cbx" depends="xInternal,stopDbInternal" description="run Ldappc" >
    </target>

    <!--
        ********** EXECUTE AUTH2LDAP ********** x

        Currently we go through the compile and build step to execute;
        need to change the script to skip some of the unneeded targets.
     -->
    <target name="x" depends="cbx" description="run Ldappc" >
    </target>

    <!-- 
        **************************************
        ********** CLEANUP SECTION. **********
        **************************************
    -->
     
    <!--
        ********** CLEAN THE BUILD APP DIRECTORY ********** clean
     -->
 
  <target name="checkDeleteBuild" depends="start"
            description="Check ok to delete the ${buildapp} directory.">
        <property name="builddir" location="build"/>
        <property name="buildapp" location="${builddir}/${app}"/>
        <!-- To skip delete check and delete automatically, remove the input condition tags.
         -->
        <input
             message="Enter y to delete the build app directory ${buildapp}, to abort use n."
                 validargs="y,n"
                 addproperty="deleteDecisionBuild"/>
        <condition property="okToDeleteBuild">
            <equals arg1="y" arg2="${deleteDecisionBuild}"/>
        </condition>    
         <property name="okToDeleteBuild" value="true"/>
    </target>

    <target name="clean" depends="checkDeleteBuild"
            description="Delete the build directory" if="okToDeleteBuild">
        <delete dir="${buildapp}"/>
    </target>


    <!-- 
        ************************************************
        ********** DATABASE SHUTDOWN SECTION. **********
        ************************************************
    -->

    <!--
       *********** SHUTDOWN THE SIGNET AND GROUPER DB ****** stopDb
      -->
    <target name="stopDbInternal" description="INTERNAL TARGET - do not call directly" if="runDatabase" unless="noDbStop">
        <echo message="Stopping HSQLDB SIGNET"/>
        <java fork="yes" classname="org.hsqldb.util.SqlTool" jvm="${javaexe}">
                <jvmarg value="-Xmx300M"/>
                <arg line="--rcfile ${sqltool.rc} --sql &quot;SHUTDOWN&quot; ${signet.dbname}" />
            <classpath refid="buildClasspath"/>
        </java>
        <echo message="Stopping HSQLDB GROUPER"/>
        <java fork="yes" classname="org.hsqldb.util.SqlTool" jvm="${javaexe}">
                <jvmarg value="-Xmx300M"/>
                <arg line="--rcfile ${sqltool.rc} --sql &quot;SHUTDOWN&quot; ${grouper.dbname}" />
            <classpath refid="buildClasspath"/>
        </java>
    </target>
 
    <!--
       *********** ONLY SHUTDOWN THE SIGNET AND GROUPER DB ****** onlyStopDb
                   (only useful if using separate instances of HSQLDB for Grouper and Signet
      -->
    
    <target name="OnlyStopDb" depends="showProperties" description="Do nothing other than stop the database">
        <echo message="Stopping HSQLDB GROUPER"/>
        <java fork="yes" classname="org.hsqldb.util.SqlTool" jvm="${javaexe}">
                <jvmarg value="-Xmx300M"/>
                <arg line="--rcfile ${sqltool.rc} --sql &quot;SHUTDOWN&quot; ${grouper.dbname}" />
            <classpath>
                <pathelement location="${basedir.lib.hsqldbJar}"/>
            </classpath>
        </java>

        <echo message="Stopping HSQLDB SIGNET"/>
        <java fork="yes" classname="org.hsqldb.util.SqlTool" jvm="${javaexe}">
                <jvmarg value="-Xmx300M"/>
                <arg line="--rcfile ${sqltool.rc} --sql &quot;SHUTDOWN&quot; ${signet.dbname}" />
            <classpath>
                <pathelement location="${basedir.lib}/hsqldb.jar"/>
            </classpath>
        </java>
    </target>
   
    <!--
        ********** STOP THE DATABASES ********** stopDb
     -->

    <target name="stopDb" depends="setBuildClasspathIsaTest,stopDbInternal" description="Stop the database" >
    </target>

        <target name="auto">
        <echo>This is the Grouper UI quickstart.</echo>
        <echo/>
        <echo>1) startGrouperDemo - runs an HSQLDB database which contains</echo>
        <echo>   a small set of demo data</echo>
        <echo>2) startGrouperGui - runs an HSQLDB database manager which connects</echo>
        <echo>  to the demo database. Demo database must be running (see 1)</echo>
    </target>

    <!-- 
        ***********************************************
        ********** JAVADOC CREATION SECTION. **********
        ***********************************************
    -->

    <!--
        ********** COMPILE AND GENERATE THE JAVADOC FILES ********** docs
        (Does a compile before doing the Javadoc)
     -->
    <target name="docsNoCompile" depends="showProperties">
        <antcall target="docs"/> 
    </target>

    <!--
        ********** GENERATE THE JAVADOC FILES ********** docs
     -->
    <target name="docs" depends="compile">
        <delete verbose="${verboseDeletes}" dir="${basedir.doc.javadoc}"></delete>
        <mkdir dir="${basedir.doc.javadoc}"/>
        <!--
        <delete verbose="${verboseDeletes}" dir="${buildapp.doc.javadoc}"></delete>
        <mkdir dir="${buildapp.doc.javadoc}"/>
         -->
        <echo message="Create javadoc for the following packages: ${javadocPackages}"/>
        <echo message="Using libraries: ${basedir.lib}"/>
        <echo message="The sourcepath for javadoc is ${basedir.src.java}"/>
        <echo message="The destination directory for javadoc is ${basedir.doc.javadoc}"/>
        <javadoc destdir="${basedir.doc.javadoc}" sourcepath="${basedir.src.java}"
             packagenames="${javadocPackages}" defaultexcludes="yes" author="true" version="true" 
             excludePackageNames="${javadocExcludePackageNames}"
             classpathref="compileClasspath" 
             use="true" windowtitle="Ldappc JavaDoc Documentation">
             <!--tag name="status" scope="types" description="Status:" /-->
             <!--tag name="todo" scope="all" description="To Do:" /-->
        </javadoc>
        <!--
        <copy todir="${buildapp.doc.javadoc}">
            <fileset dir="${basedir.doc.javadoc}">
                <include name="**"/>
             </fileset>
        </copy>
         -->

        <!-- Copy additional files that were not generated by Javadoc
             to the javadoc directory.
          -->
        <!--
          <copy todir="${buildapp.doc.javadoc}/supplement">
              <fileset dir="${basedir.doc}/javadocSupplement/supplement">
                  <include name="**"/>
             </fileset>
        </copy>
          -->

    </target>

    <!-- 
        **************************************************** 
        ********** DISTRIBUTION CREATION SECTION. **********
        **************************************************** 
    -->

    <!-- 
        ********** Set the distribution directory. ********** setDistributionDir
    -->

        <!-- 
            This target and the following targets do the following.  
            Taken no action if the distribution file does not exist.
            Fail if the distribution file already exists and the user enters "n" to abort.
            Delete the distribution file if it already exists and the user enters "y" to delete it.
        -->
    <target name="setDistributionDir" depends="setBuildClasspathIsaTest">

        <mkdir dir="${distdir}"/>
        <property name="appVersion" value="${app}-${impl.version}"/>
        <property name="distdir.appVersion" location="${distdir}/${appVersion}"/>
        <property name="distdir.tarFile" location="${distdir.appVersion}.tar"/>
        <property name="distdir.compressedTarFile" location="${distdir.appVersion}.tgz"/>
        <property name="distdir.archiveDir" location="${distdir.appVersion}"/>
        <property name="distdir.zipFile" location="${distdir.appVersion}.zip"/>

        <condition property="distAlreadyExists" >
                <!--
                <available file="${distdir.compressedTarFile}" />
                 -->
            <available file="${distdir.archiveDir}" />
        </condition>         

    </target>

    <!-- 
        ********** Check ok to delete and recreate the distribution file. ********** checkOkToDeleteDistributionFile
    -->

    <target name="checkOkToDeleteDistributionFile" depends="setDistributionDir" if="distAlreadyExists">

        <!--
        <input
            message="CAUTION: This will destroy file ${distdir.compressedTarFile}; enter y to DELETE, n to abort."
                 validargs="y,n"
                 addproperty="deleteDecisionDist"/>
         -->
        <input
            message="CAUTION: This will destroy directory ${distdir.archiveDir}; enter y to DELETE, n to abort."
                 validargs="y,n"
                 addproperty="deleteDecisionDist"/>
             
        <condition property="failDistDeletion">
            <not>
                <equals arg1="y" arg2="${deleteDecisionDist}"/>
            </not>
        </condition>    

        <condition property="doDeleteDist">
                <not>
                    <isset property="failDistDeletion"/>
                </not>
        </condition>    

    </target>

    <!-- 
        ********** Fail if should not delete distribution directory. ********** failIfNotOkToCreateDist
    -->

    <target name="failIfNotOkToCreateDist" depends="checkOkToDeleteDistributionFile" if="failDistDeletion">

        <fail messge="Terminating build of distribution at user request."/>

    </target>

    <!-- 
        ********** Delete if okay to delete the distribution directory. ********** failIfNotOkToCreateDist
    -->

    <target name="deleteIfOkToDeleteDist" depends="failIfNotOkToCreateDist" if="doDeleteDist">

        <echo message="Deleting old and creating a new Ldappc distribution as directory ${distdir.archiveDir}"/>
        <delete dir="${distdir.archiveDir}"></delete>
        <!--
        <echo message="Deleting old and creating a new Ldappc distribution as file ${distdir.zipFile}"/>
        <delete file="${distdir.compressedTarFile}"></delete>
         -->

    </target>

    <!-- 
        ********** Copy files to the distribution directory. ********** createDistribution
    -->

    <target name="createDistribution" depends="setMasterToTest,deleteIfOkToDeleteDist,docs"
    		description="Create a distribution directory, including an ldappc.jar file">


        <!-- Create the ldappc.jar file from the build/ldappc/classes dirctory -->
        <property name="buildapp.temp" location="${buildapp}/tempForJar-${impl.version}-${DSTAMP}"/>
        <mkdir dir="${buildapp.temp}"/>
        <property name="ldappcJarName" value="${app}-${impl.version}-${DSTAMP}-${TSTAMP}.jar"/>
        <property name="ldappcJar" location="${buildapp.temp}/${ldappcJarName}"/>
        <echo message="Creating the ldappc.jar file from the ${buildapp.classes} to ${ldappcJar}"/>
        <jar basedir="${buildapp.classes}" destfile="${ldappcJar}">
            <manifest>
                <attribute name="Built-By"                value="${Tom Barton, et.al.}"/>
                <attribute name="Implementation-Vendor"   value="${impl.vendor}" />
                <attribute name="Implementation-Title"    value="${app}" />
                <attribute name="Implementation-Version"  value="${impl.version}" />
                <attribute name="Implementation-URL"      value="${impl.url}" />
                <attribute name="Main-Class"              value="edu.internet2.middleware.ldappc.Ldappc" />
            </manifest>
        </jar>
        
        <mkdir dir="${appVersion}"/>

        <condition property="ldappcJarExists" >
                <available file="${ldappcJar}" />
        </condition>         
        <echo message="ldappcJarExists=${ldappcJarExists}"/>
        <echo message="ldappcJar=${ldappcJar}"/>

        <condition property="jarExists" >
                <available file="${buildapp.temp}/${ldappcJarName}" />
        </condition>         
        <echo message="jarExists=${jarExists}"/>
        <echo message="buildapp.temp/ldappcJarName=${buildapp.temp}/${ldappcJarName}"/>

        <!-- Due to the tar file created by the following code not being recoginized
             as a tar file, instead of creating a tar file, we will create the
             directory from which the tar file can be created.
         -->
        <!-- 
        <tar destfile="${distdir.tarFile}">

            <tarfileset dir="${basedir.src}" prefix="${appVersion}/src">
                <include name="**/*"/>
                <exclude name="**/*.swo"/>
                <exclude name="**/*.swp"/>
            </tarfileset>

            <tarfileset dir="${basedir.lib}" prefix="${appVersion}/lib">
                <include name="**/*"/>
            </tarfileset>

            <tarfileset dir="${basedir.conf}" prefix="${appVersion}/conf">
                <include name="**/*"/>
                <exclude name="**/*.swo"/>
                <exclude name="**/*.swp"/>
            </tarfileset>

            <tarfileset dir="${basedir.doc}" prefix="${appVersion}/doc">
                <include name="**/*"/>
            </tarfileset>

            <tarfileset dir="${builtInTestDatabaseDir}" prefix="${appVersion}/${builtInTestDatabaseName}">
                <include name="**/*"/>
                <exclude name="**/*.swo"/>
                <exclude name="**/*.swp"/>
            </tarfileset>

            <tarfileset dir="${basedir}" includes="build.xml" fullpath="${appVersion}/build.xml">
            </tarfileset>

            <tarfileset dir="${basedir}" includes="antMaster.properties" 
                    fullpath="${appVersion}/antMaster.properties">
            </tarfileset>

            <tarfileset dir="${basedir}" includes="antMasterTemplate.properties" 
                    fullpath="${appVersion}/antMasterTemplate.properties">
            </tarfileset>

            <tarfileset dir="${basedir}" includes="README.txt" 
                fullpath="${appVersion}/README.txt">
            </tarfileset>

            <tarfileset dir="${buildapp.temp}" includes="${ldappcJarName}" 
                fullpath="${appVersion}/${ldappcJarName}">
            </tarfileset>

        </tar>
         -->

        <echo message="Copying all files from ${basedir.src} to ${distdir.archiveDir}/src"/>
        <copy todir="${distdir.archiveDir}/src">
            <fileset dir="${basedir.src}">
                <include name="**/*"/>
                <exclude name="**/*.swo"/>
                <exclude name="**/*.swp"/>
            </fileset>
        </copy>

        <echo message="Copying all files from ${basedir.lib} to ${distdir.archiveDir}/lib"/>
        <copy todir="${distdir.archiveDir}/lib">
            <fileset dir="${basedir.lib}">
                <include name="**/*"/>
            </fileset>
        </copy>

        <echo message="Copying all files from ${basedir.conf} to ${distdir.archiveDir}/conf"/>
        <copy todir="${distdir.archiveDir}/conf">
            <fileset dir="${basedir.conf}">
                <include name="**/*"/>
                <exclude name="**/*.swo"/>
                <exclude name="**/*.swp"/>
            </fileset>
        </copy>

        <echo message="Copying all files from ${basedir.doc} to ${distdir.archiveDir}/doc"/>
        <copy todir="${distdir.archiveDir}/doc">
            <fileset dir="${basedir.doc}">
                <include name="**/*"/>
            </fileset>
        </copy>

        <echo message="Copying all files from ${builtInTestDatabaseDir} to ${distdir.archiveDir}/doc"/>
        <copy todir="${distdir.archiveDir}/${builtInTestDatabaseName}">
            <fileset dir="${builtInTestDatabaseDir}">
                <include name="**/*"/>
                <exclude name="**/*.swo"/>
                <exclude name="**/*.swp"/>
            </fileset>
        </copy>

        <echo message="Copying file build.xml from ${basedir} to ${distdir.archiveDir}"/>
        <copy todir="${distdir.archiveDir}">
            <fileset dir="${basedir}" includes="build.xml">
            </fileset>
        </copy>

        <echo message="Copying files antMaster*.properties from ${basedir} to ${distdir.archiveDir}"/>
        <copy todir="${distdir.archiveDir}">
            <fileset dir="${basedir}" includes="*.properties" >
            </fileset>
        </copy>

        <echo message="Copying file README.txt from ${basedir} to ${distdir.archiveDir}"/>
        <copy todir="${distdir.archiveDir}">
            <fileset dir="${basedir}" includes="README.txt" >
            </fileset>
        </copy>

        <echo message="Copying file ${ldappcJarName} from ${buildapp.temp} to ${distdir.archiveDir}"/>
        <copy todir="${distdir.archiveDir}">
            <fileset dir="${buildapp.temp}" includes="${ldappcJarName}" >
            </fileset>
        </copy>

        <delete dir="${buildapp.temp}"/>

        <tstamp>
            <format property="endtime" pattern="MM/dd/yyyy hh:mm aa" />
        </tstamp>

        <echo message="Creation of distribution directory finished at ${endtime}" />

    </target>

    <!-- 
        ********** Create zip file from the distribution directory. ********** createZip
    -->

    <target name="createZip" depends="createDistribution">
       
        <delete file="${distdir.zipFile}"/>
        <zip destfile="${distdir.zipFile}">
            <zipfileset dir="${distdir.archiveDir}" prefix="${appVersion}"/>
        </zip> 

    </target>

</project>

