<project name="grouper-ws" default="dist" basedir=".">
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	  <classpath>
	    <pathelement location="${basedir}/lib/ant/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>

	<!-- 
	provides all environment variables as Ant properties prefixed by "env.". 
	For example, CLASSPATH would be accessible in Ant as ${env.CLASSPATH}. 
	-->
	<property environment="env"/>
	<property file="build.properties"/>

	<property name="webapp.folder" value="${dist.home}/${webapp.name}" />

	<property name="build.dir" value="${basedir}/build" />
	<property name="build.dir.grouper-ws" value="${build.dir}/grouper-ws" />

	<mkdir dir="${build.dir}" />
  <mkdir dir="${build.dir.grouper-ws}" />
  <mkdir dir="${dist.home}" />
	<mkdir dir="${webapp.folder}" />

  <path id="ws.class.path">
      <!-- Make available jar files that Grouper needs -->
    <fileset dir="${basedir}/lib">
      <include name="**/*.jar"/>
    </fileset>
      
    <!-- make available any classes / resources already placed in the build folder -->
    <pathelement location="${build.dir.grouper-ws}"/>
  </path>

	<!-- TODO move this out of project -->
	<property name="webservice.folder" value="${webapp.folder}/../webservices" />
	
	<!-- target name="generate.wsdl" >  
    	<mkdir dir="${webservice.folder}"/>
    	<mkdir dir="${webservice.folder}/classes"/>
        <taskdef name="java2wsdl"
                 classname="org.apache.ws.java2wsdl.Java2WSDLTask"
                 classpathref="ui.class.path"/>
        <java2wsdl className="edu.internet2.middleware.grouper.webservices.GrouperService"
                   outputLocation="${webservice.folder}"
                   targetNamespace="http://grouper.internet2.edu/"
                   schemaTargetNamespace="http://grouper.internet2.edu/xsd">
            <classpath>
                <pathelement id="ui.class.path"/--> <!--  path="${axis2.classpath} -->
                <!-- pathelement location="${webapp.class.folder}"/>
            </classpath>
        </java2wsdl>
    </target -->

	<target name="generate-aar" depends="compile">
	   <property name="webservice.folder" value="${basedir}/webservices" />
    	<mkdir dir="${webservice.folder}/classes"/>
    	<delete dir="${webservice.folder}/classes"/>
    	<mkdir dir="${webservice.folder}/classes"/>
        <copy toDir="${webservice.folder}/classes" failonerror="false">
            <fileset dir="${build.dir.grouper-ws}" > 
                <include name="edu/internet2/middleware/grouper/webservices/**/*.class" />
            </fileset>
        </copy>
        <jar destfile="${basedir}/webapp/WEB-INF/services/GrouperService.aar">
          <fileset excludes="edu/internet2/middleware/grouper/webservices/**/*Test.class" 
            	  dir="${webservice.folder}/classes" />
        	<fileset dir="webservices/GrouperService.aar" />
        </jar>
	    <!-- copy the aar to the build dir -->
		<!-- copy file="webapp/WEB-INF/services/GrouperService.aar" 
			todir="../dist/grouper/WEB-INF/services" / -->
		
	</target>
	
	<!-- 
	
	Generate the axis bundle based on axis jars
	
	jars that are part of axis which are not in the axis jar:
	
	- activation.jar
	- commons-codec
	- commons-fileupload
	- commons-httpclient
	- commons-io
	- commons-logging
	- jaxb-api
	- jaxb-impl
	- jaxb-xjc
	- log4j
	- mail
	- xalan
	- xercesImpl
	- xml-api
	- XmlSchema
	
	#######################
	jars that are part of axis which we were already using:
	
	- activation (i2mi-common)
	- commons-fileupload (grouper-ui, removed since older)
	- commons-logging (i2mi-common, same file)
	- jaxb-api (i2mi-common, different, common is bigger)
	- jaxb-impl (i2mi-common, different, common is bigger)
	- jaxb-xjc (i2mi-common, different, common is bigger)
	- log4j (grouper, removed since older)
	- xalan (grouper-ui, removed since older)
	- xercesImpl (grouper-ui, removed since older)
	- xml-apis (grouper-ui, removed since older)
	-->
	<target name="generateAxisBundleJar">
		<mkdir dir="java/axisLibTemp"/>
		<delete dir="java/axisLibTemp"/>
		<mkdir dir="java/axisLibTemp"/>
		<unzip dest="java/axisLibTemp">
			<fileset dir="java/axisLib" includes="*.jar"/>
		</unzip>
		<delete file="java/lib/axisBundle.jar"/>
		<jar destfile="java/lib/axisBundle.jar" 
			basedir="java/axisLibTemp" />
	</target>

	<target name="clean">
	  <mkdir dir="${build.dir}" />
	  <delete dir="${build.dir}" />
	  <mkdir dir="${build.dir.grouper-ws}" />
	</target>
	
	<!-- ## End From axis
	############################################### -->
  <target name="compile">
		<javac srcdir="${basedir}/src/grouper-ws" destdir="${build.dir.grouper-ws}" 
			classpathref="ws.class.path" debug="true" >
			<compilerarg  value="-Xlint:deprecation"  />	
  	</javac>
	</target>
	<!-- 
		Builds the entire webapp 
	-->
	<target name="dist">
	  
		<!-- TODO put in options to do the log4j and other properties files -->
		
		<!-- see if we should clean -->
		<if>
		  <istrue value="${dist.cleanOnDist}" />
		  <then>
		    <antcall target="clean" />  
		  </then>
		</if>
		
		<if>
			<istrue value="${dist.packageAar}" />
			<then>
				<!-- this will compile -->
        <antcall target="generate-aar" />  
			</then>
		  <else>
		    <!-- make sure things are compiled -->
		    <antcall target="compile" />
			</else>
		</if>
		
		<!-- TODO put in options to do the java and wsdl -->
		
    <!-- make the jar first and include source -->
    <delete file="${dist.home}/grouper-ws.jar" />
		<jar file="${dist.home}/grouper-ws.jar">
			<fileset dir="${build.dir.grouper-ws}" />
      <fileset dir="${basedir}/src/grouper-ws"/>
		</jar>
		
	  <mkdir dir="${webapp.folder}/WEB-INF/classes" />
    <mkdir dir="${webapp.folder}/WEB-INF/lib" />
		
		<!-- Make all necessary jar files available to the webapp itself -->
		<!-- we are doing the classes and source with a jar -->
		<copy todir="${webapp.folder}/WEB-INF/classes"  >
      <fileset dir="${basedir}/resources"/>
		</copy>
    <copy todir="${webapp.folder}/WEB-INF/lib" >
      <fileset dir="${basedir}/lib/axis" includes="*.jar" />
      <fileset dir="${basedir}/lib/grouper" includes="*.jar" />
      <fileset dir="${basedir}/lib/grouper-ws" includes="*.jar" />
    	<fileset dir="${dist.home}" includes="grouper-ws.jar" />
    </copy>
	  
		<!-- all the webapp axis stuff like services dir and conf dir -->
	  <copy todir="${webapp.folder}">
      <fileset dir="${basedir}/webapp" />
		</copy>
	
		<!-- make a war file -->
		<property name="webapp.war" value="${webapp.folder}.war" />
		<delete file="${webapp.war}" />
		<jar destfile="${webapp.war}">
      <fileset dir="${webapp.folder}" />
		</jar>
      		
	</target>
	
	
	
	<!--
		Actually delete previous build
	-->
	<target name="-doClean" if="do.clean">
		<echo message="Removing  ${webapp.folder}"/>
		<delete dir="${webapp.folder}"/>
	</target>
	
	<!--
		Actually delete previous build class folder
	-->
	<target name="-doCleanWebappClassFolder" if="build.clean">
		<echo message="Removing  ${webapp.class.folder}"/>
		<delete dir="${webapp.class.folder}"/>
	</target>	
	
	<target name="help" description="targets and their description" > 
<echo>Please ensure you have read the documentation - </echo>	
<echo>and created a build.properties file based on the template provided</echo>

<echo></echo>
<echo>The following targets are available - type the appropriate name:</echo>
<echo></echo>
<echo>1) default </echo>
<echo>     Simply builds, without cleaning, to the webapp.folder</echo>
<echo>2) nice</echo>
<echo>     Attempts to stop the Tomcat webapp before building. </echo>
<echo>     Attempts to start the webappp afterwards</echo>
<echo>3) clean</echo>
<echo>     Always removes the webapp.class.folder. May remove the </echo>
<echo>     webapp.folder if webapp.folder.cleanable=true</echo>
<echo>     On Windows this may fail as Windows tends to lock files</echo>
<echo>4) niceclean</echo>
<echo>     Combination of nice and clean </echo>
<echo>5) dist</echo>
<echo>     Cleans and then builds to subfolder of dist.home</echo>
<echo>6) war</echo>
<echo>      Does dist and then makes a WAR file</echo>
<echo>7) resources</echo>
<echo>     Does not compile Java classes but 'refreshes' resources in</echo>
<echo>     webapp.class.folder</echo>
<echo>8 niceres</echo>
<echo>     Does not compile Java classes but 'refreshes' resources in</echo>
<echo>     webapp.class.folder and restarts webapp</echo>
<echo>9) help</echo>
<echo>     Displays this menu</echo>
<echo>10) endhelp</echo>
<echo>     Subsequent invocation of ant with no target will run  </echo>
<echo>     'default' rather than help</echo>
<echo>11) starthelp</echo>
<echo>     Subsequent invocation of ant with no target will run 'help' </echo>
<echo>12) html</echo>
<echo>     Generate Javadoc - you must have done a 'default' build previously</echo>
<echo>13) generate-web-service</echo>
<echo>     Generate web service - you must have done a 'default' build previously</echo>
<echo>14) exit</echo>
<echo>     Exit this menu without executing another target</echo>
<echo></echo>
</target>
	
	<target name="-html" if="make.javadoc" description="generate public api docs" >    
	<!-- Let's be sure we clear out old cruft first... -->    
	<delete dir="doc/api" /> 
	<path id="ui.class.path">
				<!-- Make available jar files that Grouper needs -->
			<fileset dir="${grouper.folder}/dist/lib">
				<include name="**/*.jar"/>
				<exclude name="grouper-lib-*.jar"/>
				<exclude name="grouper.jar"/>
				<exclude name="grouper-2*.jar"/>
			</fileset>
			<!-- Make available jar files the UI needs -->
			<fileset dir="${ui.folder}/java/lib">
				<include name="**/*.jar"/>
			</fileset>
			
			<!-- Last, but not least, make Grouper API available -->
			<pathelement location="${grouper.folder}/dist/lib/grouper.jar"/>
		
		</path> 
		<property name="cp" refid="ui.class.path"/>
		<available file="${grouper.folder}/src/grouper" property="exists.grouper.src"/>
		<antcall target="-create-if-absent-grouper-src"/>
		  <antcall target="-html-with-subject" inheritrefs="true"/>
		  <antcall target="-html-without-subject" inheritrefs="true"/>
		  	<antcall target="-remove-if-created-grouper-src"/>
  </target>
	
	
</project>
