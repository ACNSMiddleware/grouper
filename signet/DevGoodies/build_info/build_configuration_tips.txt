$Header: /home/hagleyj/i2mi/signet/DevGoodies/build_info/build_configuration_tips.txt,v 1.1 2007-03-21 01:02:43 ddonn Exp $
Signet Version 1.2

Signet Build Configuration Tips
-------------------------------

The following describes many of the build configuration settings and/or
modifications that can be used to customize the Signet build. In addition,
build_info.pdf provides high-level diagrams of some of this information.

  File build.xml
  --------------

This is the Ant build script for Signet. Most of build.xml can be configured
externally by modifying the files build.xml includes or imports. The only
sections of build.xml that are intended to be modified directly are the
Custom Properties ("Doppleganger") and the Tomcat-specific sections.

The first imported file is config/signet.properties. It contains a small
number of properties that are shared between the Signet build and Signet
runtime. 

The Custom Properties section allows for the inclusion of enhanced or modified
source and library files without placing them in the Signet project tree.
By default, the Ant directive is disabled (commented) in build.xml. See
    <property file="/Projects/signet/buildCustom.properties" />
in build.xml. Also refer to build_info.pdf for more information about the
Signet Doppleganger.

The next section of build.xml includes file buildSignet.properties. This file
(see details below) contains most of the build-time configuration settings.
It defines such things as the source and output directories, output filenames,
compiler settings, runtime database configuration settings, and more.

The next section optionally imports Tomcat Web Server settings if direct
deployment to Tomcat is desired during the build. Typically this would NOT be
done in a production environment but is quite handy in a development situation.
By default, the option is disabled (commented). A sample Tomcat configuration
file is provided in CVS (filename signetBuildTomcatDefs.xml).

The last and largest section of build.xml contains the build targets. This
section is divided into two subsections: public and private targets. Ant
distinguishes public targets as those with a 'description' property. Public
targets are meant to be invoked directly from the Ant command line. The two
public targets most likely to be used are 'production' and 'development'. Both
perform a complete, clean build of Signet. The primary difference between them
is that 'production' also creates the JavaDocs and does NOT deploy the 
executable to a running Tomcat instance.

Virtually all the parameters of each build target (both public and private) may
be configured in file buildSignet.properties and buildCustom.properties (the
Doppleganger). There are no hard-coded paths or filenames in build.xml. Internal
dependencies such as fileset names are hard-coded, but should not cause any
issues.


  File buildSignet.properties
  ---------------------------

If the Signet project has been retrieved from CVS (strongly recommended), then
the Ant build should work without modification. If the directory structure is
changed or different than the default CVS project, then buildSignet.properties
is the place to make changes to accomodate those differences.

The first section defines the sources (inputs) of the build. .java, .jar, and
configuration file directories are specified here as paths relative to 
build.xml (Signet's top level directory).

Note that the ${xxx} construct is an Ant substitution directive where 'xxx' is
a build-time variable.

The next section defines sources to the construction of the Signet web
application (webapp). 

The next section contains several Java compiler options such as optimization,
debug, and extended options. These affect the speed, size, and debug-ability
of the final executable.

The next section defines the various destination directories of the build
products. It is assumed that all build products will be written to 'dist.dir'
or a subdirectory, with the exception of the Java .class files.

The next section defines the 3 JAR file targets of the Signet build and the
webapp WAR file. The 'api' target contains the core Signet API executable. The
'ui' target contains the Signet user interface code. The 'util' target contains
code that is shared by both 'api' and 'ui'.

The next section defines the Ant substitution tokens used to configure the
Windows/DOS batch file that defines a Java CLASSPATH for the Signet utilities.
The Signet utilities (in the util directory) are used to intialize the 
Signet Persistent Store database.

The next two sections define the archive files generated during the build.
For each set, both a ZIP (Windows) and a GZIP (Linux/Unix) are created.
The first set of archives is the contents of the Signet project as retrieved
from CVS. This set is only generated if the 'create_src_distrib' Ant target
is invoked manually. It is not included with any other target. The second set
of archives contain the generated JavaDocs. These are generated in conjunction
with the 'production' Ant target.

The last section contains tokens and values for configuring the database
runtime parameters. The Ant build will search for the @token@ construct in
file hibernate.cfg.xml (the Signet Persistent Store) and sources.xml (the
SubjectAPI configuration file).

Note that all @token@ constructs are replaced by their corresponding values in
the distribution (dist.dir) files, not the original source files. This is
true for all @token@ replacements in the Signet build.


  File buildCustom.properties (the Doppleganger)
  ----------------------------------------------

The supplied (CVS) copy of buildCustom.properties contains commented properties
that are recognized by the Signet build. These properties supplement those
defined in buildSignet.properties. The Signet build is designed such that, if
any of these properties are defined at build time, additional Ant targets will
be invoked to include the additional files. The comments in file
buildCustom.properties explain the effect of each property.


  File signetBuildTomcatDefs.xml
  ------------------------------

This file contains task definitions that allow Ant to interact directly with
a running instance of Apache Tomcat. The values in this file were supplied by
the Tomcat distribution and should not require modification. See the file's
comments for a more thorough explanation of its values.

