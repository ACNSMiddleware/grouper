SignetXml [options] command [command-args] [filters]

    options
        -f xmlfile : output or input file name. If output file already exists,
            it is overwritten. If no -f option is specified, stdout or stdin
            is used.
       * -c commandFile : read commands from the specified file. Each line in
            the file corresponds to a separate command (i.e. export, append,
            or import). If no commandFile is specified, stdin is used. All
            options and commands following -c are ignored.
        -v : display program version information and exit.
        -h or -? : display this help and exit.

    command
        export : create an XML containing values as specified in command-args.
        import : import the entire contents of the XML.

    'export' command-args
        assignment | permission | scopeTree | subject | subsystem

    'export assignment' filters
        <null> : if no filter is specified, export all assignments

        -status [active | inactive | pending] : filter selected assignments by
            status. Default is all. May be used with 'subjId' 'scopeId'
            'functionId' or 'subsysId' (which are mutually exclusive).

        -functionId "subsysId:funcId" : selects all assignments for a given
            subsystem:function
        -functionId "subsysId:funcId, subsysId:funcId, ..." : selects
            assignments for each specified subsystem:function in the
            comma-separated list

        -scopeId "ScopeId:NodeId" : selects all assignments for given scope:node
        -scopeId "ScopeId:NodeId, ScopeId:NodeId, ..." : selects assignments
            for each scope:node in the comma-separated list

        -subjId "subject Id" : selects assignments for specified subject
        -subjId "subj 1, subj2, ..., subject n" : selects assignments for each
            subject in the comma-separated list

        -subsysId "subsystem Id" : select assignments for specified subsystem
        -subsysId "subsys1, subsys2, ..., subsysN" : selects assignments for
            each subsystem in the comma-separated list

    'export permission' filters
        -status [active | inactive | pending] : filter selected permissions by
            status. Default is all. May be used with 'subjId'

        -subjId "subjectId" : export permssions for specified subject
        -subjId "subj 1, subj2, ..., subject n" : selects permissions for each
            subject in the comma-separated list

    'export scopeTree' filters
        <null> : if no filter is specified, export all scopeTrees

        -scopeId "tree id" : selects scope tree for the given tree Id
        -scopeId "TreeId1, TreeId2, ..., TreeIdN" : selects all scope trees for
            each tree Id in the comma-separated list

        -subsysId "subsystemId" : selects scope trees for the given subsystem id
        -subsysId "subsystem1, subsystem2, ... subsystemN" : selects all
            scope trees matching subsystem ids in the comma-separated list
		
    'export subject' filters
        <null> : if no command arg is specified, export all subjects

        -subjId "sourceId:subjectId" : select subject for the given source and
            subjectId
        -subjId "source1:subj1, source2:subj2, ..." : selects each subject in
            the comma-separated list

        -source "sourceId" : selects all subjects for the given sourceId
        -source "source1, source2, ..." : selects all subjects for each of the
            sources specified in the comma-separated list

        -attrName attrValue : selects all subjects having an attribute
            matching both the attribute name and attribute value. 

    'export subsystem' filters
        <null> : if no command arg is specified, export all subsystems

        -status [active | inactive | pending] : filter selected subsystems by
            status. Default is all. May be used with 'name' 'scopeId'
            or 'subsysId' (which are mutually exclusive).

        -name "SubsysName" : selects subsystem for specified name
        -name "Subsys1, Subsys2, ..." : selects all subsystems matching
            subsystem names in the comma-separated list

        -scopeId "tree id" : selects subsystem(s) for the given tree Id
        -scopeId "TreeId1, TreeId2, ..., TreeIdN" : selects all scope trees
            matching tree Id in the comma-separated list

        -subsysId "subsystemId" : selects subsystem for the given subsystem id
        -subsysId "subsystem1, subsystem2, ... subsystemN" : selects all
            subsystems matching subsystem ids in the comma-separated list

    'import'* command-args
        add | update | deactivate | delete

  Examples:

  SignetXml -f MyAssigns.xml export assignment -subjId "Arthur Dent" -status active
    Create, or overwrite, a file called MyAssigns.xml containing all active
    Assignments belonging to Arthur Dent.

  SignetXml -f JpFdSa.xml export assignment -subjId "jpoole, fdewey, susan.albright"
    Create, or overwrite, a file called JpFdSa.xml containing any Assignments
    granted to Jean Poole, Francis Dewey, or Susan Albright. Note the use of
    double-quotes to contain the subjId command-arg because the comma-
    separated list contains spaces.

  SignetXml -f AsgnByFunc.xml export assignment -functionId "projectx:purchase-supplies"
    Export all Assignments within the procjectx subsystem for the function
    purchase-supplies.

  SignetXml -f MyAssigns.xml import add
    Import the contents of file MyAssigns.xml and add them to the Signet
    database. Do not overwrite records that have primary keys that match those
    of the records being imported.

-------------
* = Not implemented yet.

