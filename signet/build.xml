<?xml version="1.0"?>
<project
	name="Signet"
	default="db" basedir=".">
	
	<!-- Version number -->
	<property name="version" value="0.3"/>
	
	
	<property name="zipfile" value="signet-${version}-bin.zip"/>
	<property name="tarfile" value="signet-${version}-bin.tar"/>
	<property name="gzipfile" value="signet-${version}-bin.tar.gz"/>
	
	<!-- Set up properties containing important project directories -->
	<property name="source.dir" value="src"/>
	<property name="build.dir" value="classes"/>
	<property name="doc.dir" value="doc"/>
	<property name="lib.dir" value="lib"/>
	<property name="data.dir" value="data"/>
	<property name="config.dir" value="config"/>
	
	<property name="dist.dir" value="dist"/>
	
	<!-- Set up the class path for compilation and execution -->
	<path id="project.class.path">
		<!-- Include our own classes, of course -->
		<pathelement location="${build.dir}"/>
		<!-- Include jars in the project library directory -->
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>

	<!-- Generate the schemas for all mapping files in our class tree -->
	<target
		name="schema"
		depends="compile"
		description="Generate DB schema from the O/R mapping files">
		<!-- Teach Ant how to use Hibernate's schema generation tool -->
		<taskdef
			name="schemaexport"
			classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask"
			classpathref="project.class.path"/>
		<schemaexport
			config="${config.dir}/hibernate.cfg.xml" quiet="no" text="no" drop="no">
		</schemaexport>
	</target>
	
	<target
		depends="compile"
		name="addData"
	  	description="Inserts Signet metadata">
		<java classname="edu.internet2.middleware.signet.demo.AddData"
			fork="true">
			<classpath refid="project.class.path"/>
		</java>
	</target>
	
	<target
		depends="compile"
		name="makeAssignment"
	  	description="Makes Signet assignments">
		<java classname="edu.internet2.middleware.signet.demo.MakeAssignment"
			fork="true">
			<classpath refid="project.class.path"/>
		</java>
	</target>
	
	<target name="db" description="Runs HSQLDB database management UI
against the database file--use when application is not running">
		<java classname="org.hsqldb.util.DatabaseManager" fork="yes">
			<classpath refid="project.class.path"/>
			<arg value="-driver"/>
			<arg value="org.hsqldb.jdbcDriver"/>
			<arg value="-url"/>
			<arg value="jdbc:hsqldb:${data.dir}/signet"/>
			<arg value="-user"/>
			<arg value="sa"/>
		</java>
	</target>
	
	<target
		depends="compile"
		name="showData"
	  	description="Runs demo program">
		<java classname="edu.internet2.middleware.signet.demo.ShowData"
			fork="true">
			<classpath refid="project.class.path"/>
		</java>
	</target>
	
	<!-- Teach Ant how to use Hibernate's code generation tool -->
	<taskdef name="hbm2java" classname="net.sf.hibernate.tool.hbm2java.Hbm2JavaTask" classpathref="project.class.path"/>
	<!-- Generate the java code for all mapping files in our source tree -->
	<target name="codegen" description="Generate Java source from the O/R mapping files">
		<hbm2java output="${source.dir}">
			<fileset dir="${source.dir}">
				<include name="**/*.hbm.xml"/>
			</fileset>
		</hbm2java>
	</target>

	<!-- Create our runtime subdirectories and copy resources into them -->
	<target name="prepare" description="Sets up build structures">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${doc.dir}"/>
		<!-- Copy our property files and O/R mappings for use at runtime -->
		<copy todir="${build.dir}">
			<fileset dir="${config.dir}">
				<include name="**/*.cfg.xml"/>
				<include name="**/*.properties"/>
			</fileset>
			<fileset dir="${source.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.hbm.xml"/>
			</fileset>
		</copy>
	</target>

	<!-- Compile the java source of the project -->
	<target name="compile" depends="prepare" description="Compiles all Java classes">
		<javac srcdir="${source.dir}" destdir="${build.dir}" debug="on" optimize="off" deprecation="on">
			<classpath refid="project.class.path"/>
		</javac>
	</target>

	<!-- Generate Javadoc for the source files -->
	<target name="javadoc">
		<javadoc packagenames="edu.internet2.middleware.signet.*"
			destdir="${doc.dir}"
			access="public"
			use="true"
			notree="false"
			nonavbar="false"
			noindex="false"
			splitindex="true"
			author="true"
			version="true"
			nodeprecatedlist="false"
			nodeprecated="false"
			sourcepath="src"
			classpath="classes" /> 
	</target>

	<target name="create-dist" depends="compile, javadoc">
		<delete dir="${dist.dir}" />
		<copy todir="${dist.dir}">
			<fileset dir=".">
			<include name="README" />
			<include name="LICENSE" />
			</fileset>
		</copy>
		
		<copy todir="${dist.dir}/doc">
			<fileset dir="${doc.dir}">
			<include name="**/*" />
			</fileset>
		</copy>
		
		<copy todir="${dist.dir}/sql">
			<fileset dir="sql">
			<include name="**/*" />
			</fileset>
		</copy>

		<copy todir="${dist.dir}/demo">
			<fileset dir="demo">
			<include name="**/*" />
			</fileset>
		</copy>
		
		<ant dir="web" target="build" inheritAll="false" />
		<ant dir="util" target="build" inheritAll="false" />
		
		<zip destfile="${zipfile}">
			<fileset dir="${dist.dir}">
			<include name="**/*" />
			</fileset>
		</zip>
		<tar destfile="${tarfile}">
			<tarfileset dir="${dist.dir}">
			<include name="**/*" />
			</tarfileset>
		</tar>
		<gzip src="${tarfile}" destfile="${gzipfile}"/>
		<delete file="${tarfile}"/>
	</target>


	<target name="config-webapp"
		description="Sets database parameter and mailto href">
		<copy file="config/hibernate.cfg.xml"
			todir="${webapp.build}/${webapp.name}/WEB-INF/classes">
			<filterset>
				<filtersfile file="config.properties" />
			</filterset>
		</copy>
		<copy file="web/footer.jsp"
			todir="${webapp.build}/${webapp.name}">
			<filterset>
				<filtersfile file="config.properties" />
			</filterset>
		</copy>
	</target>

</project>

