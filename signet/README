Signet version 0.5 - July, 2005

What's New
----------

(1)  Basic assignment editing is now enabled.

     - You can edit an assignment if you have equal or greater privileges than
       those represented by the assignment -- if you could have made the assignment,
       you can edit the assignment.  
     - Assignment editing does a simple of "duplicate assignment" check, adding a
       page in the flow letting the user know that the same assignment already
       exists and offering a chance to revoke the predecessor.
     - New and changed assignments are now recorded in the signet_assignment_history
       table, allowing for time-based reconstruction of assignments and privileges.
     - Currently limits are editable, but not scope.

(2) The first version of the Privileges XML document is available.   A "View XML"
    link is available in the signet-demo UI which will display a person's Privileges
    document.  It depends on your browser's ability to do a nice rendering of XML.

(3) A revised LocalSubjectAdapter and SubjectFileLoader supports "group" subject
    types in addition to "person".  This isn't a connection to an external Groups
    source or anything fancy, but rather a local representation of a group as a
    subject to demonstrate the notion that Signet will assign to anything
    delivered to it via the Subject API.

(4) Some UI formatting/consistency cleanups. The most visible item is improvements
    to the assignment series of screens, where preceding steps are summarize more
    compactly at the top of the screen as you go along, and in a style consistent
    with the final summary confirmation.

    One problem remains from the last release -- showing lists with disabled
    (non-selectable) items in Mac/Safari simply doesn't work.  This limits the
    UI's ability to enable only appropriate scope items during an assignment.

Quick Start
------------------------

(1) Execute the DDL (sql/hsql.sql or sql/sybase.sql) on your database server to
    create the Signet database.

(2) Create a "signet" web application context in your servlet container.

(3) Point the web application context to the webapp/signet directory in this
    distribution.

(4) If you are using some database other than the default HSQL database supplied
    with this Signet distribution, copy your JDBC driver to two directories:
    webapp/signet/WEB-INF/lib and util/lib.

(5) Configure your database connection in two places:
    webapp/signet/WEB-INF/classes/hibernate.cfg.xml and
    util/classes/hibernate.cfg.xml. Uncomment or add a database section
    and set the connection parameters (hibernate.connection.url,
    hibernate.connection.username, hibernate.connection.password).

(6) Set your preferred hibernate logging level in two places:
    webapp/signet/WEB-INF/classes/log4j.properties and
    util/classes/log4j.properties.

(7) Change the feedback href (@FEEDBACK_URL@) in webapp/signet/tiles/footer.jsp
    to point to your preferred email address.

(8) Configure your subject sources in two places:
    webapp/signet/WEB-INF/classes/sources.xml and util/classes/sources.xml.
    If you are using the local subject adapter, add or uncomment a database
    section, and set the database connection parameters (@DB_URL@,
    @DB_USERNAME@, @DB_PASSWORD@).

(9) Note: if you are using Tomcat for authenticating users, you will need to add
    them to your conf/tomcat-users.xml file.  These users will need to be the
    same as the subject IDs of users identified as Subjects within Signet.

To populate the Signet demo application with sample data:
        
  (1) Load the sample organization-tree data:
    (a) Update the sample shell script util/treeloader/run.sh to point
        JAVA_HOME to the location of your JDK.
    (b) Use the TreeXMLLoader to create the demo sample organization-tree
        by executing the util/treeloader/run.sh script with the sample
        demo/Tree.xml file, e.g., > run.sh ../../demo/data/Tree.xml

  (2) Load the sample Subsystem data:
    (a) Update the sample shell script util/subsystemloader/run.sh to point
        JAVA_HOME to the location of your JDK.
    (b) Use the SubsystemXmlLoader to create the demo sample Subsystem by
        executing the util/subsystemloader/run.sh script with the sample
        demo/data/Subsystem.xml file, e.g.,
        > run.sh ../../demo/data/Subsystem.xml

  (3) Load the sample Subject data:
    (a) Update the sample shell script util/subjectloader/run.sh to point
        JAVA_HOME to the location of your JDK.
    (b) Modify the demo/data/Subject.txt file with any additional local Subject
        identities for your site.
    (c) Use the SubjectFileLoader to to load that sample person data by executing
        the util/personloader/run.sh script with the sample demo/Subject.txt
        file, e.g., > run.sh ../../demo/data/subject.txt

    Note that a special Subject, "SignetSuperSubject", is included in
    subject.txt, and so will be created by this invocation of the
    SubjectFileLoader.  This is a special user that has granting
    privileges for all functions in all subsystems.  It can be used to
    bootstrap initial granting privileges for the other users.   

  (4) Add login-names to your web server's authentication mechanism, with any
      passwords you like. Login names must correspond to the principal
      identifier (e.g., "demo" in the sample data) of one or more Subjects
      loaded above.


License
-------

This software is distributed under the terms of the license as described in the license.txt file.

This product includes software developed by the Apache Software Foundation (http://www.apache.org/) and Hibernate.org (http://www.hibernate.org).
