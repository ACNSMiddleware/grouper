<project name="ldappcng" default="dist" basedir=".">

  <!-- Grouper Distribution and Versioning Properties -->
  <property name="app.name"     value="grouper"/>
  <property name="impl.url"     value="http://middleware.internet2.edu/dir/groups/grouper/"/>
  <property name="impl.vendor"  value="Internet2"/>

  <!-- sets DSTAMP etc -->
	<tstamp/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${basedir}/lib/ant/ant-contrib.jar" />
		</classpath>
	</taskdef>

  <property name="conf.dir" value="${basedir}/conf" />

  <if><not><available file="${conf.dir}/ldappc.properties" /></not>
    <then><copy file="${conf.dir}/ldappc.example.properties" 
      tofile="${conf.dir}/ldappc.properties" /></then>
  </if>
  
	<!-- 
	provides all environment variables as Ant properties prefixed by "env.". 
	For example, CLASSPATH would be accessible in Ant as ${env.CLASSPATH}. 
	-->
	<property environment="env" />
	
  <if><not><available file="build.properties" /></not>
    <then><copy file="build.example.properties" tofile="build.properties" /></then>
  </if> 
	
	<available file="build.properties" property="build.properties.exists" value="true"/>

	<fail message="Couldnt detect build.properties file, copy the build.example.properties to build.properties in the project base dir, and customize" unless="build.properties.exists" />
	<property file="build.properties" />
  <property file="${basedir}/misc/version.properties"/>


	<!-- validate the build.properties -->
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): grouper.dir" unless="grouper.dir" />
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): grouper.jar.name" unless="grouper.jar.name" />
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): grouper.lib.dir" unless="grouper.lib.dir" />
  <fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): grouper.conf.dir" unless="grouper.conf.dir" />

  <available file="${grouper.jar.name}" property="grouper.file.exists" value="true" />

  <if>
    <not>
      <isset property="grouper.file.exists" />
    </not>      
    <then>
      <fail message="Cant find grouper.jar from build.properties entry grouper.jar.name: ${grouper.jar.name}!" /> 
    </then>
  </if>

  <available file="${grouper.lib.dir}/commons-lang.jar" property="grouper.lib.dir.exists" value="true" />

  <if>
    <not>
      <isset property="grouper.lib.dir.exists" />
    </not>      
    <then>
      <fail message="Cant find grouper lib dir jars (e.g. commons-lang.jar) from build.properties entry grouper.lib.dir: ${grouper.lib.dir}!" /> 
    </then>
  </if>

  <available file="${grouper.conf.dir}/grouper.properties" property="grouper.properties.file.exists" value="true" />

  <if>
    <not>
      <isset property="grouper.properties.file.exists" />
    </not>      
    <then>
      <fail message="Cant find grouper conf dir (e.g. grouper.properties) from build.properties entry grouper.conf.dir: ${grouper.conf.dir}!" /> 
    </then>
  </if>

  <if><not><available file="${resources.dir}/ldappc/ldappc.test.properties" /></not>
    <then><copy file="${resources.dir.test.ldappc}/ldappc/ldappc.test.example.properties" 
      tofile="${resources.dir.test.ldappc}/ldappc/ldappc.test.properties" /></then>
  </if>

  <property name="resources.dir" value="${basedir}/src/main/resources" />
  <property name="resources.dir.test.ldappc" value="${resources.dir}/test/edu/internet2/middleware/ldappc" />

  
	<property name="build.dir" value="${basedir}/dist/build" />
  <property name="dist.home" value="${basedir}/dist" />

	<mkdir dir="${build.dir}" />
	<mkdir dir="${dist.home}" />

	<path id="ldappcng.class.path">
		<!-- Make available jar files that Grouper needs -->
		<fileset dir="${basedir}/lib">
			<include name="**/*.jar" />
		</fileset>
    <fileset dir="${grouper.lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset file="${grouper.jar.name}" />

		<!-- make available any classes / conf already placed in the build folder -->
		<pathelement location="${build.dir}" />
	</path>

  
  
  

	<target name="clean">
		<mkdir dir="${build.dir}" />
		<delete dir="${build.dir}" />
		<mkdir dir="${build.dir}" />
	</target>

	<target name="compile">
		<javac srcdir="${basedir}/src/main/java" 
		  destdir="${build.dir}" 
		  classpathref="ldappcng.class.path" debug="true">
		</javac>
	</target>

  <target name="dist" description="do everything" depends="compile">
    <!-- make the jar first and include source -->
    <delete file="${dist.home}/ldappcng.jar" />
      <tstamp>
         <format property="the.timestamp" pattern="yyyy/MM/dd HH:mm:ss" />
      </tstamp>
      <jar destfile="${dist.home}/ldappcng.jar" basedir="${build.dir}">
        <manifest>
          <attribute name="Built-By"                value="${user.name}"/>
          <attribute name="Implementation-Vendor"   value="${impl.vendor}"/>
          <attribute name="Implementation-Title"    value="${app.name}"/>
          <attribute name="Implementation-Version"  value="${version}"/>
          <attribute name="Build-Timestamp"         value="${the.timestamp}"/>
        </manifest>
        <!-- include src/resources/schema and src/resources/META-INF -->
        <fileset dir="${resources.dir}">
          <include name="META-INF/*" />
          <include name="schema/*" />
        </fileset>
        <fileset dir="misc">
          <include name="META-INF/*" />
        </fileset>
      <fileset dir="${build.dir}" />
      <fileset dir="${basedir}/src/main/java" />
    </jar>

    
    <!-- copy todir="${webapp.folder}/WEB-INF/lib">
      <fileset dir="${basedir}/lib/axis" includes="*.jar" />
      <fileset dir="${basedir}/lib/rampart" includes="*.jar" />
      <fileset dir="${grouper.lib.dir}">
        <include name="*.jar"/>
        <exclude name="grouper*.jar"/>
      </fileset>
      <fileset file="${grouper.jar.name}" />
      <fileset dir="${basedir}/lib/grouper-ws" includes="*.jar" />
      <fileset dir="${basedir}/lib/custom" includes="*.jar" />
      <fileset dir="${dist.home}" includes="grouper-ws.jar" />
    </copy -->
	</target>

  <target name="distPackage" description="build tar gz on internet2 box">
  
    <antcall target="javadoc" />
    
    <copy todir="${basedir}/../../grouper.ldappcng-${version}">
      <fileset dir="${basedir}/../../grouper-ldappcng" />
    </copy>
    
    <!-- this assumes that everything was checked out to the right place, and no other dirs exist -->
    <tar destfile="${basedir}/../../grouper.ldappcng-${version}.tar.gz" compression="gzip">
      <tarfileset dir="${basedir}/../.." >
        <include name="grouper.ldappcng-${version}/**"/>
      </tarfileset>
    </tar>            
    
  </target>
  



	<target name="help" description="targets and their description">
		<echo>Please ensure you have read the documentation - </echo>
		<echo>and created a build.properties file based on the example provided</echo>

		<echo>
		</echo>
		<echo>The following targets are available - type the appropriate name:</echo>
		<echo>
		</echo>
		<echo>1) default (dist) </echo>
		<echo>     Simply builds, without cleaning, the jar to the dist dir</echo>
		<echo>2) clean</echo>
		<echo>     Clean the dist dir</echo>
		<echo>4) javadoc</echo>
		<echo>     Generate javadoc to the doc/api dir</echo>
		<echo>5) help</echo>
		<echo>     This message</echo>
		<echo>
		</echo>
	</target>
	<target name="javadoc" description="generate public api docs to doc/api">
		<!-- Let's be sure we clear out old cruft first... -->
		<mkdir dir="doc/api" />
		<delete>
      <fileset dir="doc/api">
        <exclude name="**/.svn" />
        <exclude name="**/.svn/**" />
      </fileset>
		</delete>
		<mkdir dir="doc/api" />
		<!-- header="&lt;script&gt;alert('whatever');&lt;/script&gt;" -->
		<javadoc destdir="doc/api" classpathref="ldappcng.class.path" access="public"
			additionalparam="-notimestamp" >
			<packageset dir="src/main/java" defaultexcludes="yes">
				<include name="edu/internet2/middleware/**" />

			</packageset>

			<link href="http://struts.apache.org/1.2.x/api/" />
			<link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api" />
			<link href="http://java.sun.com/j2se/1.4.2/docs/api" />

		</javadoc>

		<!-- replace .html?edu/internet2/middleware/grouper/webservices/GrouperService.html" with 
		.html" -->
		<!-- take out existing params, these are used by javascript to go to frames gracefully, trash them -->
		<replaceregexp flags="g">
			<regexp pattern="\.html\?[^&quot; ]*&quot;" />
			<substitution expression="\.html&quot;" />
			<fileset dir="doc/api" includes="**/*.html" />
		</replaceregexp>
		<!-- replace relative links, e.g. method links -->
		<replaceregexp flags="g">
			<regexp pattern="\.html#([^&quot;>]*)&quot;" />
			<substitution expression="\.html?view=co#\1&quot;" />
			<fileset dir="doc/api" includes="**/*.html" />
		</replaceregexp>
		<!-- replace onLoad="top.loadFrames()" with onLoad="", this javascript messes things up with viewvc params -->
		<replace file="doc/api/index.html">
			<replacetoken><![CDATA[onLoad="top.loadFrames()"]]></replacetoken>
			<replacevalue><![CDATA[onLoad=""]]></replacevalue>
		</replace>
		<!-- replace for cvs web: .html" with .html?view=co"   -->
		<replace dir="doc/api" value=".html?view=co&quot;">
			<include name="**/*.html" />
			<replacetoken><![CDATA[.html"]]></replacetoken>
		</replace>
		<replace dir="doc/api" value=".css?view=co&quot;">
			<include name="**/*.html" />
			<replacetoken><![CDATA[.css"]]></replacetoken>
		</replace>


	</target>

</project>
